pub mod action { # [allow (non_snake_case)] pub mod SendGcodeCmd { use super :: super :: super :: * ; # [derive (Clone , Debug , PartialEq , Serialize , Deserialize)] pub struct Action () ; impl WrappedActionTypeSupport for Action { type Goal = Goal ; type Result = Result ; type Feedback = Feedback ; type FeedbackMessage = FeedbackMessage ; type SendGoal = SendGoal :: Service ; type GetResult = GetResult :: Service ; fn get_ts () -> & 'static rosidl_action_type_support_t { unsafe { & * rosidl_typesupport_c__get_action_type_support_handle__grbl_msgs__action__SendGcodeCmd () } } fn make_goal_request_msg (goal_id : unique_identifier_msgs :: msg :: UUID , goal : Goal) -> SendGoal :: Request { SendGoal :: Request { goal_id , goal } } fn make_goal_response_msg (accepted : bool , stamp : builtin_interfaces :: msg :: Time) -> SendGoal :: Response { SendGoal :: Response { accepted , stamp } } fn make_feedback_msg (goal_id : unique_identifier_msgs :: msg :: UUID , feedback : Feedback) -> FeedbackMessage { FeedbackMessage { goal_id , feedback } } fn make_result_request_msg (goal_id : unique_identifier_msgs :: msg :: UUID) -> GetResult :: Request { GetResult :: Request { goal_id , } } fn make_result_response_msg (status : i8 , result : Result) -> GetResult :: Response { GetResult :: Response { status , result , } } fn destructure_goal_request_msg (msg : SendGoal :: Request) -> (unique_identifier_msgs :: msg :: UUID , Goal) { (msg . goal_id , msg . goal) } fn destructure_goal_response_msg (msg : SendGoal :: Response) -> (bool , builtin_interfaces :: msg :: Time) { (msg . accepted , msg . stamp) } fn destructure_feedback_msg (msg : FeedbackMessage) -> (unique_identifier_msgs :: msg :: UUID , Feedback) { (msg . goal_id , msg . feedback) } fn destructure_result_response_msg (msg : GetResult :: Response) -> (i8 , Result) { (msg . status , msg . result) } fn destructure_result_request_msg (msg : GetResult :: Request) -> unique_identifier_msgs :: msg :: UUID { msg . goal_id } } # [derive (Clone , Debug , PartialEq , Serialize , Deserialize)] # [serde (default)] pub struct Goal { pub command : std :: string :: String } impl WrappedTypesupport for Goal { type CStruct = grbl_msgs__action__SendGcodeCmd_Goal ; fn get_ts () -> & 'static rosidl_message_type_support_t { unsafe { & * rosidl_typesupport_c__get_message_type_support_handle__grbl_msgs__action__SendGcodeCmd_Goal () } } fn create_msg () -> * mut grbl_msgs__action__SendGcodeCmd_Goal { unsafe { grbl_msgs__action__SendGcodeCmd_Goal__create () } } fn destroy_msg (msg : * mut grbl_msgs__action__SendGcodeCmd_Goal) -> () { unsafe { grbl_msgs__action__SendGcodeCmd_Goal__destroy (msg) } ; } fn from_native (# [allow (unused)] msg : & Self :: CStruct) -> Goal { Goal { command : msg . command . to_str () . to_owned () , } } fn copy_to_native (& self , # [allow (unused)] msg : & mut Self :: CStruct) { msg . command . assign (& self . command) ; } } impl Default for Goal { fn default () -> Self { let msg_native = WrappedNativeMsg :: < Goal > :: new () ; Goal :: from_native (& msg_native) } } # [derive (Clone , Debug , PartialEq , Serialize , Deserialize)] # [serde (default)] pub struct Result { pub success : bool } impl WrappedTypesupport for Result { type CStruct = grbl_msgs__action__SendGcodeCmd_Result ; fn get_ts () -> & 'static rosidl_message_type_support_t { unsafe { & * rosidl_typesupport_c__get_message_type_support_handle__grbl_msgs__action__SendGcodeCmd_Result () } } fn create_msg () -> * mut grbl_msgs__action__SendGcodeCmd_Result { unsafe { grbl_msgs__action__SendGcodeCmd_Result__create () } } fn destroy_msg (msg : * mut grbl_msgs__action__SendGcodeCmd_Result) -> () { unsafe { grbl_msgs__action__SendGcodeCmd_Result__destroy (msg) } ; } fn from_native (# [allow (unused)] msg : & Self :: CStruct) -> Result { Result { success : msg . success , } } fn copy_to_native (& self , # [allow (unused)] msg : & mut Self :: CStruct) { msg . success = self . success ; } } impl Default for Result { fn default () -> Self { let msg_native = WrappedNativeMsg :: < Result > :: new () ; Result :: from_native (& msg_native) } } # [derive (Clone , Debug , PartialEq , Serialize , Deserialize)] # [serde (default)] pub struct Feedback { pub status : std :: string :: String } impl WrappedTypesupport for Feedback { type CStruct = grbl_msgs__action__SendGcodeCmd_Feedback ; fn get_ts () -> & 'static rosidl_message_type_support_t { unsafe { & * rosidl_typesupport_c__get_message_type_support_handle__grbl_msgs__action__SendGcodeCmd_Feedback () } } fn create_msg () -> * mut grbl_msgs__action__SendGcodeCmd_Feedback { unsafe { grbl_msgs__action__SendGcodeCmd_Feedback__create () } } fn destroy_msg (msg : * mut grbl_msgs__action__SendGcodeCmd_Feedback) -> () { unsafe { grbl_msgs__action__SendGcodeCmd_Feedback__destroy (msg) } ; } fn from_native (# [allow (unused)] msg : & Self :: CStruct) -> Feedback { Feedback { status : msg . status . to_str () . to_owned () , } } fn copy_to_native (& self , # [allow (unused)] msg : & mut Self :: CStruct) { msg . status . assign (& self . status) ; } } impl Default for Feedback { fn default () -> Self { let msg_native = WrappedNativeMsg :: < Feedback > :: new () ; Feedback :: from_native (& msg_native) } } # [allow (non_snake_case)] pub mod SendGoal { use super :: super :: super :: super :: * ; # [derive (Clone , Debug , PartialEq , Serialize , Deserialize)] pub struct Service () ; impl WrappedServiceTypeSupport for Service { type Request = Request ; type Response = Response ; fn get_ts () -> & 'static rosidl_service_type_support_t { unsafe { & * rosidl_typesupport_c__get_service_type_support_handle__grbl_msgs__action__SendGcodeCmd_SendGoal () } } } # [derive (Clone , Debug , PartialEq , Serialize , Deserialize)] # [serde (default)] pub struct Request { pub goal_id : unique_identifier_msgs :: msg :: UUID , pub goal : grbl_msgs :: action :: SendGcodeCmd :: Goal } impl WrappedTypesupport for Request { type CStruct = grbl_msgs__action__SendGcodeCmd_SendGoal_Request ; fn get_ts () -> & 'static rosidl_message_type_support_t { unsafe { & * rosidl_typesupport_c__get_message_type_support_handle__grbl_msgs__action__SendGcodeCmd_SendGoal_Request () } } fn create_msg () -> * mut grbl_msgs__action__SendGcodeCmd_SendGoal_Request { unsafe { grbl_msgs__action__SendGcodeCmd_SendGoal_Request__create () } } fn destroy_msg (msg : * mut grbl_msgs__action__SendGcodeCmd_SendGoal_Request) -> () { unsafe { grbl_msgs__action__SendGcodeCmd_SendGoal_Request__destroy (msg) } ; } fn from_native (# [allow (unused)] msg : & Self :: CStruct) -> Request { Request { goal_id : unique_identifier_msgs :: msg :: UUID :: from_native (& msg . goal_id) , goal : grbl_msgs :: action :: SendGcodeCmd :: Goal :: from_native (& msg . goal) , } } fn copy_to_native (& self , # [allow (unused)] msg : & mut Self :: CStruct) { self . goal_id . copy_to_native (& mut msg . goal_id) ; self . goal . copy_to_native (& mut msg . goal) ; } } impl Default for Request { fn default () -> Self { let msg_native = WrappedNativeMsg :: < Request > :: new () ; Request :: from_native (& msg_native) } } # [derive (Clone , Debug , PartialEq , Serialize , Deserialize)] # [serde (default)] pub struct Response { pub accepted : bool , pub stamp : builtin_interfaces :: msg :: Time } impl WrappedTypesupport for Response { type CStruct = grbl_msgs__action__SendGcodeCmd_SendGoal_Response ; fn get_ts () -> & 'static rosidl_message_type_support_t { unsafe { & * rosidl_typesupport_c__get_message_type_support_handle__grbl_msgs__action__SendGcodeCmd_SendGoal_Response () } } fn create_msg () -> * mut grbl_msgs__action__SendGcodeCmd_SendGoal_Response { unsafe { grbl_msgs__action__SendGcodeCmd_SendGoal_Response__create () } } fn destroy_msg (msg : * mut grbl_msgs__action__SendGcodeCmd_SendGoal_Response) -> () { unsafe { grbl_msgs__action__SendGcodeCmd_SendGoal_Response__destroy (msg) } ; } fn from_native (# [allow (unused)] msg : & Self :: CStruct) -> Response { Response { accepted : msg . accepted , stamp : builtin_interfaces :: msg :: Time :: from_native (& msg . stamp) , } } fn copy_to_native (& self , # [allow (unused)] msg : & mut Self :: CStruct) { msg . accepted = self . accepted ; self . stamp . copy_to_native (& mut msg . stamp) ; } } impl Default for Response { fn default () -> Self { let msg_native = WrappedNativeMsg :: < Response > :: new () ; Response :: from_native (& msg_native) } } } # [allow (non_snake_case)] pub mod GetResult { use super :: super :: super :: super :: * ; # [derive (Clone , Debug , PartialEq , Serialize , Deserialize)] pub struct Service () ; impl WrappedServiceTypeSupport for Service { type Request = Request ; type Response = Response ; fn get_ts () -> & 'static rosidl_service_type_support_t { unsafe { & * rosidl_typesupport_c__get_service_type_support_handle__grbl_msgs__action__SendGcodeCmd_GetResult () } } } # [derive (Clone , Debug , PartialEq , Serialize , Deserialize)] # [serde (default)] pub struct Request { pub goal_id : unique_identifier_msgs :: msg :: UUID } impl WrappedTypesupport for Request { type CStruct = grbl_msgs__action__SendGcodeCmd_GetResult_Request ; fn get_ts () -> & 'static rosidl_message_type_support_t { unsafe { & * rosidl_typesupport_c__get_message_type_support_handle__grbl_msgs__action__SendGcodeCmd_GetResult_Request () } } fn create_msg () -> * mut grbl_msgs__action__SendGcodeCmd_GetResult_Request { unsafe { grbl_msgs__action__SendGcodeCmd_GetResult_Request__create () } } fn destroy_msg (msg : * mut grbl_msgs__action__SendGcodeCmd_GetResult_Request) -> () { unsafe { grbl_msgs__action__SendGcodeCmd_GetResult_Request__destroy (msg) } ; } fn from_native (# [allow (unused)] msg : & Self :: CStruct) -> Request { Request { goal_id : unique_identifier_msgs :: msg :: UUID :: from_native (& msg . goal_id) , } } fn copy_to_native (& self , # [allow (unused)] msg : & mut Self :: CStruct) { self . goal_id . copy_to_native (& mut msg . goal_id) ; } } impl Default for Request { fn default () -> Self { let msg_native = WrappedNativeMsg :: < Request > :: new () ; Request :: from_native (& msg_native) } } # [derive (Clone , Debug , PartialEq , Serialize , Deserialize)] # [serde (default)] pub struct Response { pub status : i8 , pub result : grbl_msgs :: action :: SendGcodeCmd :: Result } impl WrappedTypesupport for Response { type CStruct = grbl_msgs__action__SendGcodeCmd_GetResult_Response ; fn get_ts () -> & 'static rosidl_message_type_support_t { unsafe { & * rosidl_typesupport_c__get_message_type_support_handle__grbl_msgs__action__SendGcodeCmd_GetResult_Response () } } fn create_msg () -> * mut grbl_msgs__action__SendGcodeCmd_GetResult_Response { unsafe { grbl_msgs__action__SendGcodeCmd_GetResult_Response__create () } } fn destroy_msg (msg : * mut grbl_msgs__action__SendGcodeCmd_GetResult_Response) -> () { unsafe { grbl_msgs__action__SendGcodeCmd_GetResult_Response__destroy (msg) } ; } fn from_native (# [allow (unused)] msg : & Self :: CStruct) -> Response { Response { status : msg . status , result : grbl_msgs :: action :: SendGcodeCmd :: Result :: from_native (& msg . result) , } } fn copy_to_native (& self , # [allow (unused)] msg : & mut Self :: CStruct) { msg . status = self . status ; self . result . copy_to_native (& mut msg . result) ; } } impl Default for Response { fn default () -> Self { let msg_native = WrappedNativeMsg :: < Response > :: new () ; Response :: from_native (& msg_native) } } } # [derive (Clone , Debug , PartialEq , Serialize , Deserialize)] # [serde (default)] pub struct FeedbackMessage { pub goal_id : unique_identifier_msgs :: msg :: UUID , pub feedback : grbl_msgs :: action :: SendGcodeCmd :: Feedback } impl WrappedTypesupport for FeedbackMessage { type CStruct = grbl_msgs__action__SendGcodeCmd_FeedbackMessage ; fn get_ts () -> & 'static rosidl_message_type_support_t { unsafe { & * rosidl_typesupport_c__get_message_type_support_handle__grbl_msgs__action__SendGcodeCmd_FeedbackMessage () } } fn create_msg () -> * mut grbl_msgs__action__SendGcodeCmd_FeedbackMessage { unsafe { grbl_msgs__action__SendGcodeCmd_FeedbackMessage__create () } } fn destroy_msg (msg : * mut grbl_msgs__action__SendGcodeCmd_FeedbackMessage) -> () { unsafe { grbl_msgs__action__SendGcodeCmd_FeedbackMessage__destroy (msg) } ; } fn from_native (# [allow (unused)] msg : & Self :: CStruct) -> FeedbackMessage { FeedbackMessage { goal_id : unique_identifier_msgs :: msg :: UUID :: from_native (& msg . goal_id) , feedback : grbl_msgs :: action :: SendGcodeCmd :: Feedback :: from_native (& msg . feedback) , } } fn copy_to_native (& self , # [allow (unused)] msg : & mut Self :: CStruct) { self . goal_id . copy_to_native (& mut msg . goal_id) ; self . feedback . copy_to_native (& mut msg . feedback) ; } } impl Default for FeedbackMessage { fn default () -> Self { let msg_native = WrappedNativeMsg :: < FeedbackMessage > :: new () ; FeedbackMessage :: from_native (& msg_native) } } } # [allow (non_snake_case)] pub mod SendGcodeFile { use super :: super :: super :: * ; # [derive (Clone , Debug , PartialEq , Serialize , Deserialize)] pub struct Action () ; impl WrappedActionTypeSupport for Action { type Goal = Goal ; type Result = Result ; type Feedback = Feedback ; type FeedbackMessage = FeedbackMessage ; type SendGoal = SendGoal :: Service ; type GetResult = GetResult :: Service ; fn get_ts () -> & 'static rosidl_action_type_support_t { unsafe { & * rosidl_typesupport_c__get_action_type_support_handle__grbl_msgs__action__SendGcodeFile () } } fn make_goal_request_msg (goal_id : unique_identifier_msgs :: msg :: UUID , goal : Goal) -> SendGoal :: Request { SendGoal :: Request { goal_id , goal } } fn make_goal_response_msg (accepted : bool , stamp : builtin_interfaces :: msg :: Time) -> SendGoal :: Response { SendGoal :: Response { accepted , stamp } } fn make_feedback_msg (goal_id : unique_identifier_msgs :: msg :: UUID , feedback : Feedback) -> FeedbackMessage { FeedbackMessage { goal_id , feedback } } fn make_result_request_msg (goal_id : unique_identifier_msgs :: msg :: UUID) -> GetResult :: Request { GetResult :: Request { goal_id , } } fn make_result_response_msg (status : i8 , result : Result) -> GetResult :: Response { GetResult :: Response { status , result , } } fn destructure_goal_request_msg (msg : SendGoal :: Request) -> (unique_identifier_msgs :: msg :: UUID , Goal) { (msg . goal_id , msg . goal) } fn destructure_goal_response_msg (msg : SendGoal :: Response) -> (bool , builtin_interfaces :: msg :: Time) { (msg . accepted , msg . stamp) } fn destructure_feedback_msg (msg : FeedbackMessage) -> (unique_identifier_msgs :: msg :: UUID , Feedback) { (msg . goal_id , msg . feedback) } fn destructure_result_response_msg (msg : GetResult :: Response) -> (i8 , Result) { (msg . status , msg . result) } fn destructure_result_request_msg (msg : GetResult :: Request) -> unique_identifier_msgs :: msg :: UUID { msg . goal_id } } # [derive (Clone , Debug , PartialEq , Serialize , Deserialize)] # [serde (default)] pub struct Goal { pub file_path : std :: string :: String } impl WrappedTypesupport for Goal { type CStruct = grbl_msgs__action__SendGcodeFile_Goal ; fn get_ts () -> & 'static rosidl_message_type_support_t { unsafe { & * rosidl_typesupport_c__get_message_type_support_handle__grbl_msgs__action__SendGcodeFile_Goal () } } fn create_msg () -> * mut grbl_msgs__action__SendGcodeFile_Goal { unsafe { grbl_msgs__action__SendGcodeFile_Goal__create () } } fn destroy_msg (msg : * mut grbl_msgs__action__SendGcodeFile_Goal) -> () { unsafe { grbl_msgs__action__SendGcodeFile_Goal__destroy (msg) } ; } fn from_native (# [allow (unused)] msg : & Self :: CStruct) -> Goal { Goal { file_path : msg . file_path . to_str () . to_owned () , } } fn copy_to_native (& self , # [allow (unused)] msg : & mut Self :: CStruct) { msg . file_path . assign (& self . file_path) ; } } impl Default for Goal { fn default () -> Self { let msg_native = WrappedNativeMsg :: < Goal > :: new () ; Goal :: from_native (& msg_native) } } # [derive (Clone , Debug , PartialEq , Serialize , Deserialize)] # [serde (default)] pub struct Result { pub success : bool } impl WrappedTypesupport for Result { type CStruct = grbl_msgs__action__SendGcodeFile_Result ; fn get_ts () -> & 'static rosidl_message_type_support_t { unsafe { & * rosidl_typesupport_c__get_message_type_support_handle__grbl_msgs__action__SendGcodeFile_Result () } } fn create_msg () -> * mut grbl_msgs__action__SendGcodeFile_Result { unsafe { grbl_msgs__action__SendGcodeFile_Result__create () } } fn destroy_msg (msg : * mut grbl_msgs__action__SendGcodeFile_Result) -> () { unsafe { grbl_msgs__action__SendGcodeFile_Result__destroy (msg) } ; } fn from_native (# [allow (unused)] msg : & Self :: CStruct) -> Result { Result { success : msg . success , } } fn copy_to_native (& self , # [allow (unused)] msg : & mut Self :: CStruct) { msg . success = self . success ; } } impl Default for Result { fn default () -> Self { let msg_native = WrappedNativeMsg :: < Result > :: new () ; Result :: from_native (& msg_native) } } # [derive (Clone , Debug , PartialEq , Serialize , Deserialize)] # [serde (default)] pub struct Feedback { pub status : std :: string :: String } impl WrappedTypesupport for Feedback { type CStruct = grbl_msgs__action__SendGcodeFile_Feedback ; fn get_ts () -> & 'static rosidl_message_type_support_t { unsafe { & * rosidl_typesupport_c__get_message_type_support_handle__grbl_msgs__action__SendGcodeFile_Feedback () } } fn create_msg () -> * mut grbl_msgs__action__SendGcodeFile_Feedback { unsafe { grbl_msgs__action__SendGcodeFile_Feedback__create () } } fn destroy_msg (msg : * mut grbl_msgs__action__SendGcodeFile_Feedback) -> () { unsafe { grbl_msgs__action__SendGcodeFile_Feedback__destroy (msg) } ; } fn from_native (# [allow (unused)] msg : & Self :: CStruct) -> Feedback { Feedback { status : msg . status . to_str () . to_owned () , } } fn copy_to_native (& self , # [allow (unused)] msg : & mut Self :: CStruct) { msg . status . assign (& self . status) ; } } impl Default for Feedback { fn default () -> Self { let msg_native = WrappedNativeMsg :: < Feedback > :: new () ; Feedback :: from_native (& msg_native) } } # [allow (non_snake_case)] pub mod SendGoal { use super :: super :: super :: super :: * ; # [derive (Clone , Debug , PartialEq , Serialize , Deserialize)] pub struct Service () ; impl WrappedServiceTypeSupport for Service { type Request = Request ; type Response = Response ; fn get_ts () -> & 'static rosidl_service_type_support_t { unsafe { & * rosidl_typesupport_c__get_service_type_support_handle__grbl_msgs__action__SendGcodeFile_SendGoal () } } } # [derive (Clone , Debug , PartialEq , Serialize , Deserialize)] # [serde (default)] pub struct Request { pub goal_id : unique_identifier_msgs :: msg :: UUID , pub goal : grbl_msgs :: action :: SendGcodeFile :: Goal } impl WrappedTypesupport for Request { type CStruct = grbl_msgs__action__SendGcodeFile_SendGoal_Request ; fn get_ts () -> & 'static rosidl_message_type_support_t { unsafe { & * rosidl_typesupport_c__get_message_type_support_handle__grbl_msgs__action__SendGcodeFile_SendGoal_Request () } } fn create_msg () -> * mut grbl_msgs__action__SendGcodeFile_SendGoal_Request { unsafe { grbl_msgs__action__SendGcodeFile_SendGoal_Request__create () } } fn destroy_msg (msg : * mut grbl_msgs__action__SendGcodeFile_SendGoal_Request) -> () { unsafe { grbl_msgs__action__SendGcodeFile_SendGoal_Request__destroy (msg) } ; } fn from_native (# [allow (unused)] msg : & Self :: CStruct) -> Request { Request { goal_id : unique_identifier_msgs :: msg :: UUID :: from_native (& msg . goal_id) , goal : grbl_msgs :: action :: SendGcodeFile :: Goal :: from_native (& msg . goal) , } } fn copy_to_native (& self , # [allow (unused)] msg : & mut Self :: CStruct) { self . goal_id . copy_to_native (& mut msg . goal_id) ; self . goal . copy_to_native (& mut msg . goal) ; } } impl Default for Request { fn default () -> Self { let msg_native = WrappedNativeMsg :: < Request > :: new () ; Request :: from_native (& msg_native) } } # [derive (Clone , Debug , PartialEq , Serialize , Deserialize)] # [serde (default)] pub struct Response { pub accepted : bool , pub stamp : builtin_interfaces :: msg :: Time } impl WrappedTypesupport for Response { type CStruct = grbl_msgs__action__SendGcodeFile_SendGoal_Response ; fn get_ts () -> & 'static rosidl_message_type_support_t { unsafe { & * rosidl_typesupport_c__get_message_type_support_handle__grbl_msgs__action__SendGcodeFile_SendGoal_Response () } } fn create_msg () -> * mut grbl_msgs__action__SendGcodeFile_SendGoal_Response { unsafe { grbl_msgs__action__SendGcodeFile_SendGoal_Response__create () } } fn destroy_msg (msg : * mut grbl_msgs__action__SendGcodeFile_SendGoal_Response) -> () { unsafe { grbl_msgs__action__SendGcodeFile_SendGoal_Response__destroy (msg) } ; } fn from_native (# [allow (unused)] msg : & Self :: CStruct) -> Response { Response { accepted : msg . accepted , stamp : builtin_interfaces :: msg :: Time :: from_native (& msg . stamp) , } } fn copy_to_native (& self , # [allow (unused)] msg : & mut Self :: CStruct) { msg . accepted = self . accepted ; self . stamp . copy_to_native (& mut msg . stamp) ; } } impl Default for Response { fn default () -> Self { let msg_native = WrappedNativeMsg :: < Response > :: new () ; Response :: from_native (& msg_native) } } } # [allow (non_snake_case)] pub mod GetResult { use super :: super :: super :: super :: * ; # [derive (Clone , Debug , PartialEq , Serialize , Deserialize)] pub struct Service () ; impl WrappedServiceTypeSupport for Service { type Request = Request ; type Response = Response ; fn get_ts () -> & 'static rosidl_service_type_support_t { unsafe { & * rosidl_typesupport_c__get_service_type_support_handle__grbl_msgs__action__SendGcodeFile_GetResult () } } } # [derive (Clone , Debug , PartialEq , Serialize , Deserialize)] # [serde (default)] pub struct Request { pub goal_id : unique_identifier_msgs :: msg :: UUID } impl WrappedTypesupport for Request { type CStruct = grbl_msgs__action__SendGcodeFile_GetResult_Request ; fn get_ts () -> & 'static rosidl_message_type_support_t { unsafe { & * rosidl_typesupport_c__get_message_type_support_handle__grbl_msgs__action__SendGcodeFile_GetResult_Request () } } fn create_msg () -> * mut grbl_msgs__action__SendGcodeFile_GetResult_Request { unsafe { grbl_msgs__action__SendGcodeFile_GetResult_Request__create () } } fn destroy_msg (msg : * mut grbl_msgs__action__SendGcodeFile_GetResult_Request) -> () { unsafe { grbl_msgs__action__SendGcodeFile_GetResult_Request__destroy (msg) } ; } fn from_native (# [allow (unused)] msg : & Self :: CStruct) -> Request { Request { goal_id : unique_identifier_msgs :: msg :: UUID :: from_native (& msg . goal_id) , } } fn copy_to_native (& self , # [allow (unused)] msg : & mut Self :: CStruct) { self . goal_id . copy_to_native (& mut msg . goal_id) ; } } impl Default for Request { fn default () -> Self { let msg_native = WrappedNativeMsg :: < Request > :: new () ; Request :: from_native (& msg_native) } } # [derive (Clone , Debug , PartialEq , Serialize , Deserialize)] # [serde (default)] pub struct Response { pub status : i8 , pub result : grbl_msgs :: action :: SendGcodeFile :: Result } impl WrappedTypesupport for Response { type CStruct = grbl_msgs__action__SendGcodeFile_GetResult_Response ; fn get_ts () -> & 'static rosidl_message_type_support_t { unsafe { & * rosidl_typesupport_c__get_message_type_support_handle__grbl_msgs__action__SendGcodeFile_GetResult_Response () } } fn create_msg () -> * mut grbl_msgs__action__SendGcodeFile_GetResult_Response { unsafe { grbl_msgs__action__SendGcodeFile_GetResult_Response__create () } } fn destroy_msg (msg : * mut grbl_msgs__action__SendGcodeFile_GetResult_Response) -> () { unsafe { grbl_msgs__action__SendGcodeFile_GetResult_Response__destroy (msg) } ; } fn from_native (# [allow (unused)] msg : & Self :: CStruct) -> Response { Response { status : msg . status , result : grbl_msgs :: action :: SendGcodeFile :: Result :: from_native (& msg . result) , } } fn copy_to_native (& self , # [allow (unused)] msg : & mut Self :: CStruct) { msg . status = self . status ; self . result . copy_to_native (& mut msg . result) ; } } impl Default for Response { fn default () -> Self { let msg_native = WrappedNativeMsg :: < Response > :: new () ; Response :: from_native (& msg_native) } } } # [derive (Clone , Debug , PartialEq , Serialize , Deserialize)] # [serde (default)] pub struct FeedbackMessage { pub goal_id : unique_identifier_msgs :: msg :: UUID , pub feedback : grbl_msgs :: action :: SendGcodeFile :: Feedback } impl WrappedTypesupport for FeedbackMessage { type CStruct = grbl_msgs__action__SendGcodeFile_FeedbackMessage ; fn get_ts () -> & 'static rosidl_message_type_support_t { unsafe { & * rosidl_typesupport_c__get_message_type_support_handle__grbl_msgs__action__SendGcodeFile_FeedbackMessage () } } fn create_msg () -> * mut grbl_msgs__action__SendGcodeFile_FeedbackMessage { unsafe { grbl_msgs__action__SendGcodeFile_FeedbackMessage__create () } } fn destroy_msg (msg : * mut grbl_msgs__action__SendGcodeFile_FeedbackMessage) -> () { unsafe { grbl_msgs__action__SendGcodeFile_FeedbackMessage__destroy (msg) } ; } fn from_native (# [allow (unused)] msg : & Self :: CStruct) -> FeedbackMessage { FeedbackMessage { goal_id : unique_identifier_msgs :: msg :: UUID :: from_native (& msg . goal_id) , feedback : grbl_msgs :: action :: SendGcodeFile :: Feedback :: from_native (& msg . feedback) , } } fn copy_to_native (& self , # [allow (unused)] msg : & mut Self :: CStruct) { self . goal_id . copy_to_native (& mut msg . goal_id) ; self . feedback . copy_to_native (& mut msg . feedback) ; } } impl Default for FeedbackMessage { fn default () -> Self { let msg_native = WrappedNativeMsg :: < FeedbackMessage > :: new () ; FeedbackMessage :: from_native (& msg_native) } } } } pub mod srv { # [allow (non_snake_case)] pub mod Stop { use super :: super :: super :: * ; # [derive (Clone , Debug , PartialEq , Serialize , Deserialize)] pub struct Service () ; impl WrappedServiceTypeSupport for Service { type Request = Request ; type Response = Response ; fn get_ts () -> & 'static rosidl_service_type_support_t { unsafe { & * rosidl_typesupport_c__get_service_type_support_handle__grbl_msgs__srv__Stop () } } } # [derive (Clone , Debug , PartialEq , Serialize , Deserialize)] # [serde (default)] pub struct Request { pub machine_id : std :: string :: String , pub command : std :: string :: String } impl WrappedTypesupport for Request { type CStruct = grbl_msgs__srv__Stop_Request ; fn get_ts () -> & 'static rosidl_message_type_support_t { unsafe { & * rosidl_typesupport_c__get_message_type_support_handle__grbl_msgs__srv__Stop_Request () } } fn create_msg () -> * mut grbl_msgs__srv__Stop_Request { unsafe { grbl_msgs__srv__Stop_Request__create () } } fn destroy_msg (msg : * mut grbl_msgs__srv__Stop_Request) -> () { unsafe { grbl_msgs__srv__Stop_Request__destroy (msg) } ; } fn from_native (# [allow (unused)] msg : & Self :: CStruct) -> Request { Request { machine_id : msg . machine_id . to_str () . to_owned () , command : msg . command . to_str () . to_owned () , } } fn copy_to_native (& self , # [allow (unused)] msg : & mut Self :: CStruct) { msg . machine_id . assign (& self . machine_id) ; msg . command . assign (& self . command) ; } } impl Default for Request { fn default () -> Self { let msg_native = WrappedNativeMsg :: < Request > :: new () ; Request :: from_native (& msg_native) } } # [derive (Clone , Debug , PartialEq , Serialize , Deserialize)] # [serde (default)] pub struct Response { pub success : bool } impl WrappedTypesupport for Response { type CStruct = grbl_msgs__srv__Stop_Response ; fn get_ts () -> & 'static rosidl_message_type_support_t { unsafe { & * rosidl_typesupport_c__get_message_type_support_handle__grbl_msgs__srv__Stop_Response () } } fn create_msg () -> * mut grbl_msgs__srv__Stop_Response { unsafe { grbl_msgs__srv__Stop_Response__create () } } fn destroy_msg (msg : * mut grbl_msgs__srv__Stop_Response) -> () { unsafe { grbl_msgs__srv__Stop_Response__destroy (msg) } ; } fn from_native (# [allow (unused)] msg : & Self :: CStruct) -> Response { Response { success : msg . success , } } fn copy_to_native (& self , # [allow (unused)] msg : & mut Self :: CStruct) { msg . success = self . success ; } } impl Default for Response { fn default () -> Self { let msg_native = WrappedNativeMsg :: < Response > :: new () ; Response :: from_native (& msg_native) } } } } pub mod msg { use super :: super :: * ; # [derive (Clone , Debug , PartialEq , Serialize , Deserialize)] # [serde (default)] pub struct State { pub header : std_msgs :: msg :: Header , pub state_name : std :: string :: String , pub state : u8 } impl WrappedTypesupport for State { type CStruct = grbl_msgs__msg__State ; fn get_ts () -> & 'static rosidl_message_type_support_t { unsafe { & * rosidl_typesupport_c__get_message_type_support_handle__grbl_msgs__msg__State () } } fn create_msg () -> * mut grbl_msgs__msg__State { unsafe { grbl_msgs__msg__State__create () } } fn destroy_msg (msg : * mut grbl_msgs__msg__State) -> () { unsafe { grbl_msgs__msg__State__destroy (msg) } ; } fn from_native (# [allow (unused)] msg : & Self :: CStruct) -> State { State { header : std_msgs :: msg :: Header :: from_native (& msg . header) , state_name : msg . state_name . to_str () . to_owned () , state : msg . state , } } fn copy_to_native (& self , # [allow (unused)] msg : & mut Self :: CStruct) { self . header . copy_to_native (& mut msg . header) ; msg . state_name . assign (& self . state_name) ; msg . state = self . state ; } } impl Default for State { fn default () -> Self { let msg_native = WrappedNativeMsg :: < State > :: new () ; State :: from_native (& msg_native) } } }