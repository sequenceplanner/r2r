pub mod srv { # [allow (non_snake_case)] pub mod GetState { use super :: super :: super :: * ; # [derive (Clone , Debug , PartialEq , Serialize , Deserialize)] pub struct Service () ; impl WrappedServiceTypeSupport for Service { type Request = Request ; type Response = Response ; fn get_ts () -> & 'static rosidl_service_type_support_t { unsafe { & * rosidl_typesupport_c__get_service_type_support_handle__vda5050_connector__srv__GetState () } } } # [derive (Clone , Debug , PartialEq , Serialize , Deserialize)] # [serde (default)] pub struct Request { } impl WrappedTypesupport for Request { type CStruct = vda5050_connector__srv__GetState_Request ; fn get_ts () -> & 'static rosidl_message_type_support_t { unsafe { & * rosidl_typesupport_c__get_message_type_support_handle__vda5050_connector__srv__GetState_Request () } } fn create_msg () -> * mut vda5050_connector__srv__GetState_Request { unsafe { vda5050_connector__srv__GetState_Request__create () } } fn destroy_msg (msg : * mut vda5050_connector__srv__GetState_Request) -> () { unsafe { vda5050_connector__srv__GetState_Request__destroy (msg) } ; } fn from_native (# [allow (unused)] msg : & Self :: CStruct) -> Request { Request { } } fn copy_to_native (& self , # [allow (unused)] msg : & mut Self :: CStruct) { } } impl Default for Request { fn default () -> Self { let msg_native = WrappedNativeMsg :: < Request > :: new () ; Request :: from_native (& msg_native) } } # [derive (Clone , Debug , PartialEq , Serialize , Deserialize)] # [serde (default)] pub struct Response { pub state : vda5050_msgs :: msg :: OrderState } impl WrappedTypesupport for Response { type CStruct = vda5050_connector__srv__GetState_Response ; fn get_ts () -> & 'static rosidl_message_type_support_t { unsafe { & * rosidl_typesupport_c__get_message_type_support_handle__vda5050_connector__srv__GetState_Response () } } fn create_msg () -> * mut vda5050_connector__srv__GetState_Response { unsafe { vda5050_connector__srv__GetState_Response__create () } } fn destroy_msg (msg : * mut vda5050_connector__srv__GetState_Response) -> () { unsafe { vda5050_connector__srv__GetState_Response__destroy (msg) } ; } fn from_native (# [allow (unused)] msg : & Self :: CStruct) -> Response { Response { state : vda5050_msgs :: msg :: OrderState :: from_native (& msg . state) , } } fn copy_to_native (& self , # [allow (unused)] msg : & mut Self :: CStruct) { self . state . copy_to_native (& mut msg . state) ; } } impl Default for Response { fn default () -> Self { let msg_native = WrappedNativeMsg :: < Response > :: new () ; Response :: from_native (& msg_native) } } } # [allow (non_snake_case)] pub mod SupportedActions { use super :: super :: super :: * ; # [derive (Clone , Debug , PartialEq , Serialize , Deserialize)] pub struct Service () ; impl WrappedServiceTypeSupport for Service { type Request = Request ; type Response = Response ; fn get_ts () -> & 'static rosidl_service_type_support_t { unsafe { & * rosidl_typesupport_c__get_service_type_support_handle__vda5050_connector__srv__SupportedActions () } } } # [derive (Clone , Debug , PartialEq , Serialize , Deserialize)] # [serde (default)] pub struct Request { } impl WrappedTypesupport for Request { type CStruct = vda5050_connector__srv__SupportedActions_Request ; fn get_ts () -> & 'static rosidl_message_type_support_t { unsafe { & * rosidl_typesupport_c__get_message_type_support_handle__vda5050_connector__srv__SupportedActions_Request () } } fn create_msg () -> * mut vda5050_connector__srv__SupportedActions_Request { unsafe { vda5050_connector__srv__SupportedActions_Request__create () } } fn destroy_msg (msg : * mut vda5050_connector__srv__SupportedActions_Request) -> () { unsafe { vda5050_connector__srv__SupportedActions_Request__destroy (msg) } ; } fn from_native (# [allow (unused)] msg : & Self :: CStruct) -> Request { Request { } } fn copy_to_native (& self , # [allow (unused)] msg : & mut Self :: CStruct) { } } impl Default for Request { fn default () -> Self { let msg_native = WrappedNativeMsg :: < Request > :: new () ; Request :: from_native (& msg_native) } } # [derive (Clone , Debug , PartialEq , Serialize , Deserialize)] # [serde (default)] pub struct Response { pub agv_actions : Vec < vda5050_msgs :: msg :: AGVAction > } impl WrappedTypesupport for Response { type CStruct = vda5050_connector__srv__SupportedActions_Response ; fn get_ts () -> & 'static rosidl_message_type_support_t { unsafe { & * rosidl_typesupport_c__get_message_type_support_handle__vda5050_connector__srv__SupportedActions_Response () } } fn create_msg () -> * mut vda5050_connector__srv__SupportedActions_Response { unsafe { vda5050_connector__srv__SupportedActions_Response__create () } } fn destroy_msg (msg : * mut vda5050_connector__srv__SupportedActions_Response) -> () { unsafe { vda5050_connector__srv__SupportedActions_Response__destroy (msg) } ; } fn from_native (# [allow (unused)] msg : & Self :: CStruct) -> Response { Response { agv_actions : { let mut temp = Vec :: with_capacity (msg . agv_actions . size) ; let slice = unsafe { std :: slice :: from_raw_parts (msg . agv_actions . data , msg . agv_actions . size) } ; for s in slice { temp . push (vda5050_msgs :: msg :: AGVAction :: from_native (s)) ; } temp } , } } fn copy_to_native (& self , # [allow (unused)] msg : & mut Self :: CStruct) { unsafe { vda5050_msgs__msg__AGVAction__Sequence__fini (& mut msg . agv_actions) ; vda5050_msgs__msg__AGVAction__Sequence__init (& mut msg . agv_actions , self . agv_actions . len ()) ; let slice = std :: slice :: from_raw_parts_mut (msg . agv_actions . data , msg . agv_actions . size) ; for (t , s) in slice . iter_mut () . zip (& self . agv_actions) { s . copy_to_native (t) ; } } } } impl Default for Response { fn default () -> Self { let msg_native = WrappedNativeMsg :: < Response > :: new () ; Response :: from_native (& msg_native) } } } } pub mod action { # [allow (non_snake_case)] pub mod NavigateToNode { use super :: super :: super :: * ; # [derive (Clone , Debug , PartialEq , Serialize , Deserialize)] pub struct Action () ; impl WrappedActionTypeSupport for Action { type Goal = Goal ; type Result = Result ; type Feedback = Feedback ; type FeedbackMessage = FeedbackMessage ; type SendGoal = SendGoal :: Service ; type GetResult = GetResult :: Service ; fn get_ts () -> & 'static rosidl_action_type_support_t { unsafe { & * rosidl_typesupport_c__get_action_type_support_handle__vda5050_connector__action__NavigateToNode () } } fn make_goal_request_msg (goal_id : unique_identifier_msgs :: msg :: UUID , goal : Goal) -> SendGoal :: Request { SendGoal :: Request { goal_id , goal } } fn make_goal_response_msg (accepted : bool , stamp : builtin_interfaces :: msg :: Time) -> SendGoal :: Response { SendGoal :: Response { accepted , stamp } } fn make_feedback_msg (goal_id : unique_identifier_msgs :: msg :: UUID , feedback : Feedback) -> FeedbackMessage { FeedbackMessage { goal_id , feedback } } fn make_result_request_msg (goal_id : unique_identifier_msgs :: msg :: UUID) -> GetResult :: Request { GetResult :: Request { goal_id , } } fn make_result_response_msg (status : i8 , result : Result) -> GetResult :: Response { GetResult :: Response { status , result , } } fn destructure_goal_request_msg (msg : SendGoal :: Request) -> (unique_identifier_msgs :: msg :: UUID , Goal) { (msg . goal_id , msg . goal) } fn destructure_goal_response_msg (msg : SendGoal :: Response) -> (bool , builtin_interfaces :: msg :: Time) { (msg . accepted , msg . stamp) } fn destructure_feedback_msg (msg : FeedbackMessage) -> (unique_identifier_msgs :: msg :: UUID , Feedback) { (msg . goal_id , msg . feedback) } fn destructure_result_response_msg (msg : GetResult :: Response) -> (i8 , Result) { (msg . status , msg . result) } fn destructure_result_request_msg (msg : GetResult :: Request) -> unique_identifier_msgs :: msg :: UUID { msg . goal_id } } # [derive (Clone , Debug , PartialEq , Serialize , Deserialize)] # [serde (default)] pub struct Goal { pub edge : vda5050_msgs :: msg :: Edge , pub node : vda5050_msgs :: msg :: Node } impl WrappedTypesupport for Goal { type CStruct = vda5050_connector__action__NavigateToNode_Goal ; fn get_ts () -> & 'static rosidl_message_type_support_t { unsafe { & * rosidl_typesupport_c__get_message_type_support_handle__vda5050_connector__action__NavigateToNode_Goal () } } fn create_msg () -> * mut vda5050_connector__action__NavigateToNode_Goal { unsafe { vda5050_connector__action__NavigateToNode_Goal__create () } } fn destroy_msg (msg : * mut vda5050_connector__action__NavigateToNode_Goal) -> () { unsafe { vda5050_connector__action__NavigateToNode_Goal__destroy (msg) } ; } fn from_native (# [allow (unused)] msg : & Self :: CStruct) -> Goal { Goal { edge : vda5050_msgs :: msg :: Edge :: from_native (& msg . edge) , node : vda5050_msgs :: msg :: Node :: from_native (& msg . node) , } } fn copy_to_native (& self , # [allow (unused)] msg : & mut Self :: CStruct) { self . edge . copy_to_native (& mut msg . edge) ; self . node . copy_to_native (& mut msg . node) ; } } impl Default for Goal { fn default () -> Self { let msg_native = WrappedNativeMsg :: < Goal > :: new () ; Goal :: from_native (& msg_native) } } # [derive (Clone , Debug , PartialEq , Serialize , Deserialize)] # [serde (default)] pub struct Result { pub result : std_msgs :: msg :: Empty } impl WrappedTypesupport for Result { type CStruct = vda5050_connector__action__NavigateToNode_Result ; fn get_ts () -> & 'static rosidl_message_type_support_t { unsafe { & * rosidl_typesupport_c__get_message_type_support_handle__vda5050_connector__action__NavigateToNode_Result () } } fn create_msg () -> * mut vda5050_connector__action__NavigateToNode_Result { unsafe { vda5050_connector__action__NavigateToNode_Result__create () } } fn destroy_msg (msg : * mut vda5050_connector__action__NavigateToNode_Result) -> () { unsafe { vda5050_connector__action__NavigateToNode_Result__destroy (msg) } ; } fn from_native (# [allow (unused)] msg : & Self :: CStruct) -> Result { Result { result : std_msgs :: msg :: Empty :: from_native (& msg . result) , } } fn copy_to_native (& self , # [allow (unused)] msg : & mut Self :: CStruct) { self . result . copy_to_native (& mut msg . result) ; } } impl Default for Result { fn default () -> Self { let msg_native = WrappedNativeMsg :: < Result > :: new () ; Result :: from_native (& msg_native) } } # [derive (Clone , Debug , PartialEq , Serialize , Deserialize)] # [serde (default)] pub struct Feedback { pub position : vda5050_msgs :: msg :: AGVPosition , pub velocity : vda5050_msgs :: msg :: Velocity } impl WrappedTypesupport for Feedback { type CStruct = vda5050_connector__action__NavigateToNode_Feedback ; fn get_ts () -> & 'static rosidl_message_type_support_t { unsafe { & * rosidl_typesupport_c__get_message_type_support_handle__vda5050_connector__action__NavigateToNode_Feedback () } } fn create_msg () -> * mut vda5050_connector__action__NavigateToNode_Feedback { unsafe { vda5050_connector__action__NavigateToNode_Feedback__create () } } fn destroy_msg (msg : * mut vda5050_connector__action__NavigateToNode_Feedback) -> () { unsafe { vda5050_connector__action__NavigateToNode_Feedback__destroy (msg) } ; } fn from_native (# [allow (unused)] msg : & Self :: CStruct) -> Feedback { Feedback { position : vda5050_msgs :: msg :: AGVPosition :: from_native (& msg . position) , velocity : vda5050_msgs :: msg :: Velocity :: from_native (& msg . velocity) , } } fn copy_to_native (& self , # [allow (unused)] msg : & mut Self :: CStruct) { self . position . copy_to_native (& mut msg . position) ; self . velocity . copy_to_native (& mut msg . velocity) ; } } impl Default for Feedback { fn default () -> Self { let msg_native = WrappedNativeMsg :: < Feedback > :: new () ; Feedback :: from_native (& msg_native) } } # [allow (non_snake_case)] pub mod SendGoal { use super :: super :: super :: super :: * ; # [derive (Clone , Debug , PartialEq , Serialize , Deserialize)] pub struct Service () ; impl WrappedServiceTypeSupport for Service { type Request = Request ; type Response = Response ; fn get_ts () -> & 'static rosidl_service_type_support_t { unsafe { & * rosidl_typesupport_c__get_service_type_support_handle__vda5050_connector__action__NavigateToNode_SendGoal () } } } # [derive (Clone , Debug , PartialEq , Serialize , Deserialize)] # [serde (default)] pub struct Request { pub goal_id : unique_identifier_msgs :: msg :: UUID , pub goal : vda5050_connector :: action :: NavigateToNode :: Goal } impl WrappedTypesupport for Request { type CStruct = vda5050_connector__action__NavigateToNode_SendGoal_Request ; fn get_ts () -> & 'static rosidl_message_type_support_t { unsafe { & * rosidl_typesupport_c__get_message_type_support_handle__vda5050_connector__action__NavigateToNode_SendGoal_Request () } } fn create_msg () -> * mut vda5050_connector__action__NavigateToNode_SendGoal_Request { unsafe { vda5050_connector__action__NavigateToNode_SendGoal_Request__create () } } fn destroy_msg (msg : * mut vda5050_connector__action__NavigateToNode_SendGoal_Request) -> () { unsafe { vda5050_connector__action__NavigateToNode_SendGoal_Request__destroy (msg) } ; } fn from_native (# [allow (unused)] msg : & Self :: CStruct) -> Request { Request { goal_id : unique_identifier_msgs :: msg :: UUID :: from_native (& msg . goal_id) , goal : vda5050_connector :: action :: NavigateToNode :: Goal :: from_native (& msg . goal) , } } fn copy_to_native (& self , # [allow (unused)] msg : & mut Self :: CStruct) { self . goal_id . copy_to_native (& mut msg . goal_id) ; self . goal . copy_to_native (& mut msg . goal) ; } } impl Default for Request { fn default () -> Self { let msg_native = WrappedNativeMsg :: < Request > :: new () ; Request :: from_native (& msg_native) } } # [derive (Clone , Debug , PartialEq , Serialize , Deserialize)] # [serde (default)] pub struct Response { pub accepted : bool , pub stamp : builtin_interfaces :: msg :: Time } impl WrappedTypesupport for Response { type CStruct = vda5050_connector__action__NavigateToNode_SendGoal_Response ; fn get_ts () -> & 'static rosidl_message_type_support_t { unsafe { & * rosidl_typesupport_c__get_message_type_support_handle__vda5050_connector__action__NavigateToNode_SendGoal_Response () } } fn create_msg () -> * mut vda5050_connector__action__NavigateToNode_SendGoal_Response { unsafe { vda5050_connector__action__NavigateToNode_SendGoal_Response__create () } } fn destroy_msg (msg : * mut vda5050_connector__action__NavigateToNode_SendGoal_Response) -> () { unsafe { vda5050_connector__action__NavigateToNode_SendGoal_Response__destroy (msg) } ; } fn from_native (# [allow (unused)] msg : & Self :: CStruct) -> Response { Response { accepted : msg . accepted , stamp : builtin_interfaces :: msg :: Time :: from_native (& msg . stamp) , } } fn copy_to_native (& self , # [allow (unused)] msg : & mut Self :: CStruct) { msg . accepted = self . accepted ; self . stamp . copy_to_native (& mut msg . stamp) ; } } impl Default for Response { fn default () -> Self { let msg_native = WrappedNativeMsg :: < Response > :: new () ; Response :: from_native (& msg_native) } } } # [allow (non_snake_case)] pub mod GetResult { use super :: super :: super :: super :: * ; # [derive (Clone , Debug , PartialEq , Serialize , Deserialize)] pub struct Service () ; impl WrappedServiceTypeSupport for Service { type Request = Request ; type Response = Response ; fn get_ts () -> & 'static rosidl_service_type_support_t { unsafe { & * rosidl_typesupport_c__get_service_type_support_handle__vda5050_connector__action__NavigateToNode_GetResult () } } } # [derive (Clone , Debug , PartialEq , Serialize , Deserialize)] # [serde (default)] pub struct Request { pub goal_id : unique_identifier_msgs :: msg :: UUID } impl WrappedTypesupport for Request { type CStruct = vda5050_connector__action__NavigateToNode_GetResult_Request ; fn get_ts () -> & 'static rosidl_message_type_support_t { unsafe { & * rosidl_typesupport_c__get_message_type_support_handle__vda5050_connector__action__NavigateToNode_GetResult_Request () } } fn create_msg () -> * mut vda5050_connector__action__NavigateToNode_GetResult_Request { unsafe { vda5050_connector__action__NavigateToNode_GetResult_Request__create () } } fn destroy_msg (msg : * mut vda5050_connector__action__NavigateToNode_GetResult_Request) -> () { unsafe { vda5050_connector__action__NavigateToNode_GetResult_Request__destroy (msg) } ; } fn from_native (# [allow (unused)] msg : & Self :: CStruct) -> Request { Request { goal_id : unique_identifier_msgs :: msg :: UUID :: from_native (& msg . goal_id) , } } fn copy_to_native (& self , # [allow (unused)] msg : & mut Self :: CStruct) { self . goal_id . copy_to_native (& mut msg . goal_id) ; } } impl Default for Request { fn default () -> Self { let msg_native = WrappedNativeMsg :: < Request > :: new () ; Request :: from_native (& msg_native) } } # [derive (Clone , Debug , PartialEq , Serialize , Deserialize)] # [serde (default)] pub struct Response { pub status : i8 , pub result : vda5050_connector :: action :: NavigateToNode :: Result } impl WrappedTypesupport for Response { type CStruct = vda5050_connector__action__NavigateToNode_GetResult_Response ; fn get_ts () -> & 'static rosidl_message_type_support_t { unsafe { & * rosidl_typesupport_c__get_message_type_support_handle__vda5050_connector__action__NavigateToNode_GetResult_Response () } } fn create_msg () -> * mut vda5050_connector__action__NavigateToNode_GetResult_Response { unsafe { vda5050_connector__action__NavigateToNode_GetResult_Response__create () } } fn destroy_msg (msg : * mut vda5050_connector__action__NavigateToNode_GetResult_Response) -> () { unsafe { vda5050_connector__action__NavigateToNode_GetResult_Response__destroy (msg) } ; } fn from_native (# [allow (unused)] msg : & Self :: CStruct) -> Response { Response { status : msg . status , result : vda5050_connector :: action :: NavigateToNode :: Result :: from_native (& msg . result) , } } fn copy_to_native (& self , # [allow (unused)] msg : & mut Self :: CStruct) { msg . status = self . status ; self . result . copy_to_native (& mut msg . result) ; } } impl Default for Response { fn default () -> Self { let msg_native = WrappedNativeMsg :: < Response > :: new () ; Response :: from_native (& msg_native) } } } # [derive (Clone , Debug , PartialEq , Serialize , Deserialize)] # [serde (default)] pub struct FeedbackMessage { pub goal_id : unique_identifier_msgs :: msg :: UUID , pub feedback : vda5050_connector :: action :: NavigateToNode :: Feedback } impl WrappedTypesupport for FeedbackMessage { type CStruct = vda5050_connector__action__NavigateToNode_FeedbackMessage ; fn get_ts () -> & 'static rosidl_message_type_support_t { unsafe { & * rosidl_typesupport_c__get_message_type_support_handle__vda5050_connector__action__NavigateToNode_FeedbackMessage () } } fn create_msg () -> * mut vda5050_connector__action__NavigateToNode_FeedbackMessage { unsafe { vda5050_connector__action__NavigateToNode_FeedbackMessage__create () } } fn destroy_msg (msg : * mut vda5050_connector__action__NavigateToNode_FeedbackMessage) -> () { unsafe { vda5050_connector__action__NavigateToNode_FeedbackMessage__destroy (msg) } ; } fn from_native (# [allow (unused)] msg : & Self :: CStruct) -> FeedbackMessage { FeedbackMessage { goal_id : unique_identifier_msgs :: msg :: UUID :: from_native (& msg . goal_id) , feedback : vda5050_connector :: action :: NavigateToNode :: Feedback :: from_native (& msg . feedback) , } } fn copy_to_native (& self , # [allow (unused)] msg : & mut Self :: CStruct) { self . goal_id . copy_to_native (& mut msg . goal_id) ; self . feedback . copy_to_native (& mut msg . feedback) ; } } impl Default for FeedbackMessage { fn default () -> Self { let msg_native = WrappedNativeMsg :: < FeedbackMessage > :: new () ; FeedbackMessage :: from_native (& msg_native) } } } # [allow (non_snake_case)] pub mod ProcessVDAAction { use super :: super :: super :: * ; # [derive (Clone , Debug , PartialEq , Serialize , Deserialize)] pub struct Action () ; impl WrappedActionTypeSupport for Action { type Goal = Goal ; type Result = Result ; type Feedback = Feedback ; type FeedbackMessage = FeedbackMessage ; type SendGoal = SendGoal :: Service ; type GetResult = GetResult :: Service ; fn get_ts () -> & 'static rosidl_action_type_support_t { unsafe { & * rosidl_typesupport_c__get_action_type_support_handle__vda5050_connector__action__ProcessVDAAction () } } fn make_goal_request_msg (goal_id : unique_identifier_msgs :: msg :: UUID , goal : Goal) -> SendGoal :: Request { SendGoal :: Request { goal_id , goal } } fn make_goal_response_msg (accepted : bool , stamp : builtin_interfaces :: msg :: Time) -> SendGoal :: Response { SendGoal :: Response { accepted , stamp } } fn make_feedback_msg (goal_id : unique_identifier_msgs :: msg :: UUID , feedback : Feedback) -> FeedbackMessage { FeedbackMessage { goal_id , feedback } } fn make_result_request_msg (goal_id : unique_identifier_msgs :: msg :: UUID) -> GetResult :: Request { GetResult :: Request { goal_id , } } fn make_result_response_msg (status : i8 , result : Result) -> GetResult :: Response { GetResult :: Response { status , result , } } fn destructure_goal_request_msg (msg : SendGoal :: Request) -> (unique_identifier_msgs :: msg :: UUID , Goal) { (msg . goal_id , msg . goal) } fn destructure_goal_response_msg (msg : SendGoal :: Response) -> (bool , builtin_interfaces :: msg :: Time) { (msg . accepted , msg . stamp) } fn destructure_feedback_msg (msg : FeedbackMessage) -> (unique_identifier_msgs :: msg :: UUID , Feedback) { (msg . goal_id , msg . feedback) } fn destructure_result_response_msg (msg : GetResult :: Response) -> (i8 , Result) { (msg . status , msg . result) } fn destructure_result_request_msg (msg : GetResult :: Request) -> unique_identifier_msgs :: msg :: UUID { msg . goal_id } } # [derive (Clone , Debug , PartialEq , Serialize , Deserialize)] # [serde (default)] pub struct Goal { pub action : vda5050_msgs :: msg :: Action } impl WrappedTypesupport for Goal { type CStruct = vda5050_connector__action__ProcessVDAAction_Goal ; fn get_ts () -> & 'static rosidl_message_type_support_t { unsafe { & * rosidl_typesupport_c__get_message_type_support_handle__vda5050_connector__action__ProcessVDAAction_Goal () } } fn create_msg () -> * mut vda5050_connector__action__ProcessVDAAction_Goal { unsafe { vda5050_connector__action__ProcessVDAAction_Goal__create () } } fn destroy_msg (msg : * mut vda5050_connector__action__ProcessVDAAction_Goal) -> () { unsafe { vda5050_connector__action__ProcessVDAAction_Goal__destroy (msg) } ; } fn from_native (# [allow (unused)] msg : & Self :: CStruct) -> Goal { Goal { action : vda5050_msgs :: msg :: Action :: from_native (& msg . action) , } } fn copy_to_native (& self , # [allow (unused)] msg : & mut Self :: CStruct) { self . action . copy_to_native (& mut msg . action) ; } } impl Default for Goal { fn default () -> Self { let msg_native = WrappedNativeMsg :: < Goal > :: new () ; Goal :: from_native (& msg_native) } } # [derive (Clone , Debug , PartialEq , Serialize , Deserialize)] # [serde (default)] pub struct Result { pub result : vda5050_msgs :: msg :: CurrentAction } impl WrappedTypesupport for Result { type CStruct = vda5050_connector__action__ProcessVDAAction_Result ; fn get_ts () -> & 'static rosidl_message_type_support_t { unsafe { & * rosidl_typesupport_c__get_message_type_support_handle__vda5050_connector__action__ProcessVDAAction_Result () } } fn create_msg () -> * mut vda5050_connector__action__ProcessVDAAction_Result { unsafe { vda5050_connector__action__ProcessVDAAction_Result__create () } } fn destroy_msg (msg : * mut vda5050_connector__action__ProcessVDAAction_Result) -> () { unsafe { vda5050_connector__action__ProcessVDAAction_Result__destroy (msg) } ; } fn from_native (# [allow (unused)] msg : & Self :: CStruct) -> Result { Result { result : vda5050_msgs :: msg :: CurrentAction :: from_native (& msg . result) , } } fn copy_to_native (& self , # [allow (unused)] msg : & mut Self :: CStruct) { self . result . copy_to_native (& mut msg . result) ; } } impl Default for Result { fn default () -> Self { let msg_native = WrappedNativeMsg :: < Result > :: new () ; Result :: from_native (& msg_native) } } # [derive (Clone , Debug , PartialEq , Serialize , Deserialize)] # [serde (default)] pub struct Feedback { pub current_action : vda5050_msgs :: msg :: CurrentAction } impl WrappedTypesupport for Feedback { type CStruct = vda5050_connector__action__ProcessVDAAction_Feedback ; fn get_ts () -> & 'static rosidl_message_type_support_t { unsafe { & * rosidl_typesupport_c__get_message_type_support_handle__vda5050_connector__action__ProcessVDAAction_Feedback () } } fn create_msg () -> * mut vda5050_connector__action__ProcessVDAAction_Feedback { unsafe { vda5050_connector__action__ProcessVDAAction_Feedback__create () } } fn destroy_msg (msg : * mut vda5050_connector__action__ProcessVDAAction_Feedback) -> () { unsafe { vda5050_connector__action__ProcessVDAAction_Feedback__destroy (msg) } ; } fn from_native (# [allow (unused)] msg : & Self :: CStruct) -> Feedback { Feedback { current_action : vda5050_msgs :: msg :: CurrentAction :: from_native (& msg . current_action) , } } fn copy_to_native (& self , # [allow (unused)] msg : & mut Self :: CStruct) { self . current_action . copy_to_native (& mut msg . current_action) ; } } impl Default for Feedback { fn default () -> Self { let msg_native = WrappedNativeMsg :: < Feedback > :: new () ; Feedback :: from_native (& msg_native) } } # [allow (non_snake_case)] pub mod SendGoal { use super :: super :: super :: super :: * ; # [derive (Clone , Debug , PartialEq , Serialize , Deserialize)] pub struct Service () ; impl WrappedServiceTypeSupport for Service { type Request = Request ; type Response = Response ; fn get_ts () -> & 'static rosidl_service_type_support_t { unsafe { & * rosidl_typesupport_c__get_service_type_support_handle__vda5050_connector__action__ProcessVDAAction_SendGoal () } } } # [derive (Clone , Debug , PartialEq , Serialize , Deserialize)] # [serde (default)] pub struct Request { pub goal_id : unique_identifier_msgs :: msg :: UUID , pub goal : vda5050_connector :: action :: ProcessVDAAction :: Goal } impl WrappedTypesupport for Request { type CStruct = vda5050_connector__action__ProcessVDAAction_SendGoal_Request ; fn get_ts () -> & 'static rosidl_message_type_support_t { unsafe { & * rosidl_typesupport_c__get_message_type_support_handle__vda5050_connector__action__ProcessVDAAction_SendGoal_Request () } } fn create_msg () -> * mut vda5050_connector__action__ProcessVDAAction_SendGoal_Request { unsafe { vda5050_connector__action__ProcessVDAAction_SendGoal_Request__create () } } fn destroy_msg (msg : * mut vda5050_connector__action__ProcessVDAAction_SendGoal_Request) -> () { unsafe { vda5050_connector__action__ProcessVDAAction_SendGoal_Request__destroy (msg) } ; } fn from_native (# [allow (unused)] msg : & Self :: CStruct) -> Request { Request { goal_id : unique_identifier_msgs :: msg :: UUID :: from_native (& msg . goal_id) , goal : vda5050_connector :: action :: ProcessVDAAction :: Goal :: from_native (& msg . goal) , } } fn copy_to_native (& self , # [allow (unused)] msg : & mut Self :: CStruct) { self . goal_id . copy_to_native (& mut msg . goal_id) ; self . goal . copy_to_native (& mut msg . goal) ; } } impl Default for Request { fn default () -> Self { let msg_native = WrappedNativeMsg :: < Request > :: new () ; Request :: from_native (& msg_native) } } # [derive (Clone , Debug , PartialEq , Serialize , Deserialize)] # [serde (default)] pub struct Response { pub accepted : bool , pub stamp : builtin_interfaces :: msg :: Time } impl WrappedTypesupport for Response { type CStruct = vda5050_connector__action__ProcessVDAAction_SendGoal_Response ; fn get_ts () -> & 'static rosidl_message_type_support_t { unsafe { & * rosidl_typesupport_c__get_message_type_support_handle__vda5050_connector__action__ProcessVDAAction_SendGoal_Response () } } fn create_msg () -> * mut vda5050_connector__action__ProcessVDAAction_SendGoal_Response { unsafe { vda5050_connector__action__ProcessVDAAction_SendGoal_Response__create () } } fn destroy_msg (msg : * mut vda5050_connector__action__ProcessVDAAction_SendGoal_Response) -> () { unsafe { vda5050_connector__action__ProcessVDAAction_SendGoal_Response__destroy (msg) } ; } fn from_native (# [allow (unused)] msg : & Self :: CStruct) -> Response { Response { accepted : msg . accepted , stamp : builtin_interfaces :: msg :: Time :: from_native (& msg . stamp) , } } fn copy_to_native (& self , # [allow (unused)] msg : & mut Self :: CStruct) { msg . accepted = self . accepted ; self . stamp . copy_to_native (& mut msg . stamp) ; } } impl Default for Response { fn default () -> Self { let msg_native = WrappedNativeMsg :: < Response > :: new () ; Response :: from_native (& msg_native) } } } # [allow (non_snake_case)] pub mod GetResult { use super :: super :: super :: super :: * ; # [derive (Clone , Debug , PartialEq , Serialize , Deserialize)] pub struct Service () ; impl WrappedServiceTypeSupport for Service { type Request = Request ; type Response = Response ; fn get_ts () -> & 'static rosidl_service_type_support_t { unsafe { & * rosidl_typesupport_c__get_service_type_support_handle__vda5050_connector__action__ProcessVDAAction_GetResult () } } } # [derive (Clone , Debug , PartialEq , Serialize , Deserialize)] # [serde (default)] pub struct Request { pub goal_id : unique_identifier_msgs :: msg :: UUID } impl WrappedTypesupport for Request { type CStruct = vda5050_connector__action__ProcessVDAAction_GetResult_Request ; fn get_ts () -> & 'static rosidl_message_type_support_t { unsafe { & * rosidl_typesupport_c__get_message_type_support_handle__vda5050_connector__action__ProcessVDAAction_GetResult_Request () } } fn create_msg () -> * mut vda5050_connector__action__ProcessVDAAction_GetResult_Request { unsafe { vda5050_connector__action__ProcessVDAAction_GetResult_Request__create () } } fn destroy_msg (msg : * mut vda5050_connector__action__ProcessVDAAction_GetResult_Request) -> () { unsafe { vda5050_connector__action__ProcessVDAAction_GetResult_Request__destroy (msg) } ; } fn from_native (# [allow (unused)] msg : & Self :: CStruct) -> Request { Request { goal_id : unique_identifier_msgs :: msg :: UUID :: from_native (& msg . goal_id) , } } fn copy_to_native (& self , # [allow (unused)] msg : & mut Self :: CStruct) { self . goal_id . copy_to_native (& mut msg . goal_id) ; } } impl Default for Request { fn default () -> Self { let msg_native = WrappedNativeMsg :: < Request > :: new () ; Request :: from_native (& msg_native) } } # [derive (Clone , Debug , PartialEq , Serialize , Deserialize)] # [serde (default)] pub struct Response { pub status : i8 , pub result : vda5050_connector :: action :: ProcessVDAAction :: Result } impl WrappedTypesupport for Response { type CStruct = vda5050_connector__action__ProcessVDAAction_GetResult_Response ; fn get_ts () -> & 'static rosidl_message_type_support_t { unsafe { & * rosidl_typesupport_c__get_message_type_support_handle__vda5050_connector__action__ProcessVDAAction_GetResult_Response () } } fn create_msg () -> * mut vda5050_connector__action__ProcessVDAAction_GetResult_Response { unsafe { vda5050_connector__action__ProcessVDAAction_GetResult_Response__create () } } fn destroy_msg (msg : * mut vda5050_connector__action__ProcessVDAAction_GetResult_Response) -> () { unsafe { vda5050_connector__action__ProcessVDAAction_GetResult_Response__destroy (msg) } ; } fn from_native (# [allow (unused)] msg : & Self :: CStruct) -> Response { Response { status : msg . status , result : vda5050_connector :: action :: ProcessVDAAction :: Result :: from_native (& msg . result) , } } fn copy_to_native (& self , # [allow (unused)] msg : & mut Self :: CStruct) { msg . status = self . status ; self . result . copy_to_native (& mut msg . result) ; } } impl Default for Response { fn default () -> Self { let msg_native = WrappedNativeMsg :: < Response > :: new () ; Response :: from_native (& msg_native) } } } # [derive (Clone , Debug , PartialEq , Serialize , Deserialize)] # [serde (default)] pub struct FeedbackMessage { pub goal_id : unique_identifier_msgs :: msg :: UUID , pub feedback : vda5050_connector :: action :: ProcessVDAAction :: Feedback } impl WrappedTypesupport for FeedbackMessage { type CStruct = vda5050_connector__action__ProcessVDAAction_FeedbackMessage ; fn get_ts () -> & 'static rosidl_message_type_support_t { unsafe { & * rosidl_typesupport_c__get_message_type_support_handle__vda5050_connector__action__ProcessVDAAction_FeedbackMessage () } } fn create_msg () -> * mut vda5050_connector__action__ProcessVDAAction_FeedbackMessage { unsafe { vda5050_connector__action__ProcessVDAAction_FeedbackMessage__create () } } fn destroy_msg (msg : * mut vda5050_connector__action__ProcessVDAAction_FeedbackMessage) -> () { unsafe { vda5050_connector__action__ProcessVDAAction_FeedbackMessage__destroy (msg) } ; } fn from_native (# [allow (unused)] msg : & Self :: CStruct) -> FeedbackMessage { FeedbackMessage { goal_id : unique_identifier_msgs :: msg :: UUID :: from_native (& msg . goal_id) , feedback : vda5050_connector :: action :: ProcessVDAAction :: Feedback :: from_native (& msg . feedback) , } } fn copy_to_native (& self , # [allow (unused)] msg : & mut Self :: CStruct) { self . goal_id . copy_to_native (& mut msg . goal_id) ; self . feedback . copy_to_native (& mut msg . feedback) ; } } impl Default for FeedbackMessage { fn default () -> Self { let msg_native = WrappedNativeMsg :: < FeedbackMessage > :: new () ; FeedbackMessage :: from_native (& msg_native) } } } }