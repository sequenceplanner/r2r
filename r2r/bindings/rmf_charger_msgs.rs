pub mod msg { use super :: super :: * ; # [derive (Clone , Debug , PartialEq , Serialize , Deserialize)] # [serde (default)] pub struct ChargerCancel { pub charger_name : std :: string :: String , pub request_id : std :: string :: String } impl WrappedTypesupport for ChargerCancel { type CStruct = rmf_charger_msgs__msg__ChargerCancel ; fn get_ts () -> & 'static rosidl_message_type_support_t { unsafe { & * rosidl_typesupport_c__get_message_type_support_handle__rmf_charger_msgs__msg__ChargerCancel () } } fn create_msg () -> * mut rmf_charger_msgs__msg__ChargerCancel { unsafe { rmf_charger_msgs__msg__ChargerCancel__create () } } fn destroy_msg (msg : * mut rmf_charger_msgs__msg__ChargerCancel) -> () { unsafe { rmf_charger_msgs__msg__ChargerCancel__destroy (msg) } ; } fn from_native (# [allow (unused)] msg : & Self :: CStruct) -> ChargerCancel { ChargerCancel { charger_name : msg . charger_name . to_str () . to_owned () , request_id : msg . request_id . to_str () . to_owned () , } } fn copy_to_native (& self , # [allow (unused)] msg : & mut Self :: CStruct) { msg . charger_name . assign (& self . charger_name) ; msg . request_id . assign (& self . request_id) ; } } impl Default for ChargerCancel { fn default () -> Self { let msg_native = WrappedNativeMsg :: < ChargerCancel > :: new () ; ChargerCancel :: from_native (& msg_native) } } # [derive (Clone , Debug , PartialEq , Serialize , Deserialize)] # [serde (default)] pub struct ChargerRequest { pub charger_name : std :: string :: String , pub fleet_name : std :: string :: String , pub robot_name : std :: string :: String , pub start_timeout : builtin_interfaces :: msg :: Duration , pub request_id : std :: string :: String } impl WrappedTypesupport for ChargerRequest { type CStruct = rmf_charger_msgs__msg__ChargerRequest ; fn get_ts () -> & 'static rosidl_message_type_support_t { unsafe { & * rosidl_typesupport_c__get_message_type_support_handle__rmf_charger_msgs__msg__ChargerRequest () } } fn create_msg () -> * mut rmf_charger_msgs__msg__ChargerRequest { unsafe { rmf_charger_msgs__msg__ChargerRequest__create () } } fn destroy_msg (msg : * mut rmf_charger_msgs__msg__ChargerRequest) -> () { unsafe { rmf_charger_msgs__msg__ChargerRequest__destroy (msg) } ; } fn from_native (# [allow (unused)] msg : & Self :: CStruct) -> ChargerRequest { ChargerRequest { charger_name : msg . charger_name . to_str () . to_owned () , fleet_name : msg . fleet_name . to_str () . to_owned () , robot_name : msg . robot_name . to_str () . to_owned () , start_timeout : builtin_interfaces :: msg :: Duration :: from_native (& msg . start_timeout) , request_id : msg . request_id . to_str () . to_owned () , } } fn copy_to_native (& self , # [allow (unused)] msg : & mut Self :: CStruct) { msg . charger_name . assign (& self . charger_name) ; msg . fleet_name . assign (& self . fleet_name) ; msg . robot_name . assign (& self . robot_name) ; self . start_timeout . copy_to_native (& mut msg . start_timeout) ; msg . request_id . assign (& self . request_id) ; } } impl Default for ChargerRequest { fn default () -> Self { let msg_native = WrappedNativeMsg :: < ChargerRequest > :: new () ; ChargerRequest :: from_native (& msg_native) } } # [derive (Clone , Debug , PartialEq , Serialize , Deserialize)] # [serde (default)] pub struct ChargerState { pub charger_time : builtin_interfaces :: msg :: Time , pub state : u32 , pub charger_name : std :: string :: String , pub error_message : std :: string :: String , pub request_id : std :: string :: String , pub robot_fleet : std :: string :: String , pub robot_name : std :: string :: String , pub time_to_fully_charged : builtin_interfaces :: msg :: Duration } impl WrappedTypesupport for ChargerState { type CStruct = rmf_charger_msgs__msg__ChargerState ; fn get_ts () -> & 'static rosidl_message_type_support_t { unsafe { & * rosidl_typesupport_c__get_message_type_support_handle__rmf_charger_msgs__msg__ChargerState () } } fn create_msg () -> * mut rmf_charger_msgs__msg__ChargerState { unsafe { rmf_charger_msgs__msg__ChargerState__create () } } fn destroy_msg (msg : * mut rmf_charger_msgs__msg__ChargerState) -> () { unsafe { rmf_charger_msgs__msg__ChargerState__destroy (msg) } ; } fn from_native (# [allow (unused)] msg : & Self :: CStruct) -> ChargerState { ChargerState { charger_time : builtin_interfaces :: msg :: Time :: from_native (& msg . charger_time) , state : msg . state , charger_name : msg . charger_name . to_str () . to_owned () , error_message : msg . error_message . to_str () . to_owned () , request_id : msg . request_id . to_str () . to_owned () , robot_fleet : msg . robot_fleet . to_str () . to_owned () , robot_name : msg . robot_name . to_str () . to_owned () , time_to_fully_charged : builtin_interfaces :: msg :: Duration :: from_native (& msg . time_to_fully_charged) , } } fn copy_to_native (& self , # [allow (unused)] msg : & mut Self :: CStruct) { self . charger_time . copy_to_native (& mut msg . charger_time) ; msg . state = self . state ; msg . charger_name . assign (& self . charger_name) ; msg . error_message . assign (& self . error_message) ; msg . request_id . assign (& self . request_id) ; msg . robot_fleet . assign (& self . robot_fleet) ; msg . robot_name . assign (& self . robot_name) ; self . time_to_fully_charged . copy_to_native (& mut msg . time_to_fully_charged) ; } } impl Default for ChargerState { fn default () -> Self { let msg_native = WrappedNativeMsg :: < ChargerState > :: new () ; ChargerState :: from_native (& msg_native) } } # [allow (non_upper_case_globals)] impl ChargerState { pub const CHARGER_ASSIGNED : _bindgen_ty_1516 = rmf_charger_msgs__msg__ChargerState__CHARGER_ASSIGNED ; pub const CHARGER_CHARGING : _bindgen_ty_1517 = rmf_charger_msgs__msg__ChargerState__CHARGER_CHARGING ; pub const CHARGER_ERROR : _bindgen_ty_1519 = rmf_charger_msgs__msg__ChargerState__CHARGER_ERROR ; pub const CHARGER_IDLE : _bindgen_ty_1515 = rmf_charger_msgs__msg__ChargerState__CHARGER_IDLE ; pub const CHARGER_RELEASED : _bindgen_ty_1518 = rmf_charger_msgs__msg__ChargerState__CHARGER_RELEASED ; } }