pub mod msg { use super :: super :: * ; # [derive (Clone , Debug , PartialEq , Serialize , Deserialize)] # [serde (default)] pub struct LiftRequest { pub lift_name : std :: string :: String , pub request_time : builtin_interfaces :: msg :: Time , pub session_id : std :: string :: String , pub request_type : u8 , pub destination_floor : std :: string :: String , pub door_state : u8 } impl WrappedTypesupport for LiftRequest { type CStruct = rmf_lift_msgs__msg__LiftRequest ; fn get_ts () -> & 'static rosidl_message_type_support_t { unsafe { & * rosidl_typesupport_c__get_message_type_support_handle__rmf_lift_msgs__msg__LiftRequest () } } fn create_msg () -> * mut rmf_lift_msgs__msg__LiftRequest { unsafe { rmf_lift_msgs__msg__LiftRequest__create () } } fn destroy_msg (msg : * mut rmf_lift_msgs__msg__LiftRequest) -> () { unsafe { rmf_lift_msgs__msg__LiftRequest__destroy (msg) } ; } fn from_native (# [allow (unused)] msg : & Self :: CStruct) -> LiftRequest { LiftRequest { lift_name : msg . lift_name . to_str () . to_owned () , request_time : builtin_interfaces :: msg :: Time :: from_native (& msg . request_time) , session_id : msg . session_id . to_str () . to_owned () , request_type : msg . request_type , destination_floor : msg . destination_floor . to_str () . to_owned () , door_state : msg . door_state , } } fn copy_to_native (& self , # [allow (unused)] msg : & mut Self :: CStruct) { msg . lift_name . assign (& self . lift_name) ; self . request_time . copy_to_native (& mut msg . request_time) ; msg . session_id . assign (& self . session_id) ; msg . request_type = self . request_type ; msg . destination_floor . assign (& self . destination_floor) ; msg . door_state = self . door_state ; } } impl Default for LiftRequest { fn default () -> Self { let msg_native = WrappedNativeMsg :: < LiftRequest > :: new () ; LiftRequest :: from_native (& msg_native) } } # [allow (non_upper_case_globals)] impl LiftRequest { pub const DOOR_CLOSED : _bindgen_ty_1555 = rmf_lift_msgs__msg__LiftRequest__DOOR_CLOSED ; pub const DOOR_OPEN : _bindgen_ty_1556 = rmf_lift_msgs__msg__LiftRequest__DOOR_OPEN ; pub const REQUEST_AGV_MODE : _bindgen_ty_1553 = rmf_lift_msgs__msg__LiftRequest__REQUEST_AGV_MODE ; pub const REQUEST_END_SESSION : _bindgen_ty_1552 = rmf_lift_msgs__msg__LiftRequest__REQUEST_END_SESSION ; pub const REQUEST_HUMAN_MODE : _bindgen_ty_1554 = rmf_lift_msgs__msg__LiftRequest__REQUEST_HUMAN_MODE ; } # [derive (Clone , Debug , PartialEq , Serialize , Deserialize)] # [serde (default)] pub struct LiftState { pub lift_time : builtin_interfaces :: msg :: Time , pub lift_name : std :: string :: String , pub available_floors : Vec < std :: string :: String > , pub current_floor : std :: string :: String , pub destination_floor : std :: string :: String , pub door_state : u8 , pub motion_state : u8 , pub available_modes : Vec < u8 > , pub current_mode : u8 , pub session_id : std :: string :: String } impl WrappedTypesupport for LiftState { type CStruct = rmf_lift_msgs__msg__LiftState ; fn get_ts () -> & 'static rosidl_message_type_support_t { unsafe { & * rosidl_typesupport_c__get_message_type_support_handle__rmf_lift_msgs__msg__LiftState () } } fn create_msg () -> * mut rmf_lift_msgs__msg__LiftState { unsafe { rmf_lift_msgs__msg__LiftState__create () } } fn destroy_msg (msg : * mut rmf_lift_msgs__msg__LiftState) -> () { unsafe { rmf_lift_msgs__msg__LiftState__destroy (msg) } ; } fn from_native (# [allow (unused)] msg : & Self :: CStruct) -> LiftState { LiftState { lift_time : builtin_interfaces :: msg :: Time :: from_native (& msg . lift_time) , lift_name : msg . lift_name . to_str () . to_owned () , available_floors : msg . available_floors . to_vec () , current_floor : msg . current_floor . to_str () . to_owned () , destination_floor : msg . destination_floor . to_str () . to_owned () , door_state : msg . door_state , motion_state : msg . motion_state , available_modes : msg . available_modes . to_vec () , current_mode : msg . current_mode , session_id : msg . session_id . to_str () . to_owned () , } } fn copy_to_native (& self , # [allow (unused)] msg : & mut Self :: CStruct) { self . lift_time . copy_to_native (& mut msg . lift_time) ; msg . lift_name . assign (& self . lift_name) ; msg . available_floors . update (& self . available_floors) ; msg . current_floor . assign (& self . current_floor) ; msg . destination_floor . assign (& self . destination_floor) ; msg . door_state = self . door_state ; msg . motion_state = self . motion_state ; msg . available_modes . update (& self . available_modes) ; msg . current_mode = self . current_mode ; msg . session_id . assign (& self . session_id) ; } } impl Default for LiftState { fn default () -> Self { let msg_native = WrappedNativeMsg :: < LiftState > :: new () ; LiftState :: from_native (& msg_native) } } # [allow (non_upper_case_globals)] impl LiftState { pub const DOOR_CLOSED : _bindgen_ty_1557 = rmf_lift_msgs__msg__LiftState__DOOR_CLOSED ; pub const DOOR_MOVING : _bindgen_ty_1558 = rmf_lift_msgs__msg__LiftState__DOOR_MOVING ; pub const DOOR_OPEN : _bindgen_ty_1559 = rmf_lift_msgs__msg__LiftState__DOOR_OPEN ; pub const MODE_AGV : _bindgen_ty_1566 = rmf_lift_msgs__msg__LiftState__MODE_AGV ; pub const MODE_EMERGENCY : _bindgen_ty_1569 = rmf_lift_msgs__msg__LiftState__MODE_EMERGENCY ; pub const MODE_FIRE : _bindgen_ty_1567 = rmf_lift_msgs__msg__LiftState__MODE_FIRE ; pub const MODE_HUMAN : _bindgen_ty_1565 = rmf_lift_msgs__msg__LiftState__MODE_HUMAN ; pub const MODE_OFFLINE : _bindgen_ty_1568 = rmf_lift_msgs__msg__LiftState__MODE_OFFLINE ; pub const MODE_UNKNOWN : _bindgen_ty_1564 = rmf_lift_msgs__msg__LiftState__MODE_UNKNOWN ; pub const MOTION_DOWN : _bindgen_ty_1562 = rmf_lift_msgs__msg__LiftState__MOTION_DOWN ; pub const MOTION_STOPPED : _bindgen_ty_1560 = rmf_lift_msgs__msg__LiftState__MOTION_STOPPED ; pub const MOTION_UNKNOWN : _bindgen_ty_1563 = rmf_lift_msgs__msg__LiftState__MOTION_UNKNOWN ; pub const MOTION_UP : _bindgen_ty_1561 = rmf_lift_msgs__msg__LiftState__MOTION_UP ; } }