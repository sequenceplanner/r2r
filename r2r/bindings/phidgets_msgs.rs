pub mod srv { # [allow (non_snake_case)] pub mod SetDigitalOutput { use super :: super :: super :: * ; # [derive (Clone , Debug , PartialEq , Serialize , Deserialize)] pub struct Service () ; impl WrappedServiceTypeSupport for Service { type Request = Request ; type Response = Response ; fn get_ts () -> & 'static rosidl_service_type_support_t { unsafe { & * rosidl_typesupport_c__get_service_type_support_handle__phidgets_msgs__srv__SetDigitalOutput () } } } # [derive (Clone , Debug , PartialEq , Serialize , Deserialize)] # [serde (default)] pub struct Request { pub index : u16 , pub state : bool } impl WrappedTypesupport for Request { type CStruct = phidgets_msgs__srv__SetDigitalOutput_Request ; fn get_ts () -> & 'static rosidl_message_type_support_t { unsafe { & * rosidl_typesupport_c__get_message_type_support_handle__phidgets_msgs__srv__SetDigitalOutput_Request () } } fn create_msg () -> * mut phidgets_msgs__srv__SetDigitalOutput_Request { unsafe { phidgets_msgs__srv__SetDigitalOutput_Request__create () } } fn destroy_msg (msg : * mut phidgets_msgs__srv__SetDigitalOutput_Request) -> () { unsafe { phidgets_msgs__srv__SetDigitalOutput_Request__destroy (msg) } ; } fn from_native (# [allow (unused)] msg : & Self :: CStruct) -> Request { Request { index : msg . index , state : msg . state , } } fn copy_to_native (& self , # [allow (unused)] msg : & mut Self :: CStruct) { msg . index = self . index ; msg . state = self . state ; } } impl Default for Request { fn default () -> Self { let msg_native = WrappedNativeMsg :: < Request > :: new () ; Request :: from_native (& msg_native) } } # [derive (Clone , Debug , PartialEq , Serialize , Deserialize)] # [serde (default)] pub struct Response { pub success : bool } impl WrappedTypesupport for Response { type CStruct = phidgets_msgs__srv__SetDigitalOutput_Response ; fn get_ts () -> & 'static rosidl_message_type_support_t { unsafe { & * rosidl_typesupport_c__get_message_type_support_handle__phidgets_msgs__srv__SetDigitalOutput_Response () } } fn create_msg () -> * mut phidgets_msgs__srv__SetDigitalOutput_Response { unsafe { phidgets_msgs__srv__SetDigitalOutput_Response__create () } } fn destroy_msg (msg : * mut phidgets_msgs__srv__SetDigitalOutput_Response) -> () { unsafe { phidgets_msgs__srv__SetDigitalOutput_Response__destroy (msg) } ; } fn from_native (# [allow (unused)] msg : & Self :: CStruct) -> Response { Response { success : msg . success , } } fn copy_to_native (& self , # [allow (unused)] msg : & mut Self :: CStruct) { msg . success = self . success ; } } impl Default for Response { fn default () -> Self { let msg_native = WrappedNativeMsg :: < Response > :: new () ; Response :: from_native (& msg_native) } } } } pub mod msg { use super :: super :: * ; # [derive (Clone , Debug , PartialEq , Serialize , Deserialize)] # [serde (default)] pub struct EncoderDecimatedSpeed { pub header : std_msgs :: msg :: Header , pub avr_speed : f64 } impl WrappedTypesupport for EncoderDecimatedSpeed { type CStruct = phidgets_msgs__msg__EncoderDecimatedSpeed ; fn get_ts () -> & 'static rosidl_message_type_support_t { unsafe { & * rosidl_typesupport_c__get_message_type_support_handle__phidgets_msgs__msg__EncoderDecimatedSpeed () } } fn create_msg () -> * mut phidgets_msgs__msg__EncoderDecimatedSpeed { unsafe { phidgets_msgs__msg__EncoderDecimatedSpeed__create () } } fn destroy_msg (msg : * mut phidgets_msgs__msg__EncoderDecimatedSpeed) -> () { unsafe { phidgets_msgs__msg__EncoderDecimatedSpeed__destroy (msg) } ; } fn from_native (# [allow (unused)] msg : & Self :: CStruct) -> EncoderDecimatedSpeed { EncoderDecimatedSpeed { header : std_msgs :: msg :: Header :: from_native (& msg . header) , avr_speed : msg . avr_speed , } } fn copy_to_native (& self , # [allow (unused)] msg : & mut Self :: CStruct) { self . header . copy_to_native (& mut msg . header) ; msg . avr_speed = self . avr_speed ; } } impl Default for EncoderDecimatedSpeed { fn default () -> Self { let msg_native = WrappedNativeMsg :: < EncoderDecimatedSpeed > :: new () ; EncoderDecimatedSpeed :: from_native (& msg_native) } } }