pub mod msg { use super :: super :: * ; # [derive (Clone , Debug , PartialEq , Serialize , Deserialize)] # [serde (default)] pub struct PedestrianImageID { pub header : std_msgs :: msg :: Header , pub pixel_x : i32 , pub pixel_y : i32 , pub image_width : i32 , pub image_height : i32 } impl WrappedTypesupport for PedestrianImageID { type CStruct = marti_perception_msgs__msg__PedestrianImageID ; fn get_ts () -> & 'static rosidl_message_type_support_t { unsafe { & * rosidl_typesupport_c__get_message_type_support_handle__marti_perception_msgs__msg__PedestrianImageID () } } fn create_msg () -> * mut marti_perception_msgs__msg__PedestrianImageID { unsafe { marti_perception_msgs__msg__PedestrianImageID__create () } } fn destroy_msg (msg : * mut marti_perception_msgs__msg__PedestrianImageID) -> () { unsafe { marti_perception_msgs__msg__PedestrianImageID__destroy (msg) } ; } fn from_native (# [allow (unused)] msg : & Self :: CStruct) -> PedestrianImageID { PedestrianImageID { header : std_msgs :: msg :: Header :: from_native (& msg . header) , pixel_x : msg . pixel_x , pixel_y : msg . pixel_y , image_width : msg . image_width , image_height : msg . image_height , } } fn copy_to_native (& self , # [allow (unused)] msg : & mut Self :: CStruct) { self . header . copy_to_native (& mut msg . header) ; msg . pixel_x = self . pixel_x ; msg . pixel_y = self . pixel_y ; msg . image_width = self . image_width ; msg . image_height = self . image_height ; } } impl Default for PedestrianImageID { fn default () -> Self { let msg_native = WrappedNativeMsg :: < PedestrianImageID > :: new () ; PedestrianImageID :: from_native (& msg_native) } } }