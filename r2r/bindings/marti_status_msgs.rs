pub mod msg { use super :: super :: * ; # [derive (Clone , Debug , PartialEq , Serialize , Deserialize)] # [serde (default)] pub struct ChronyTrackingStatus { pub header : std_msgs :: msg :: Header , pub reference : std :: string :: String , pub stratum : i32 , pub system_time_offset : f64 , pub last_offset : f64 , pub rms_offset : f64 , pub frequency_offset : f32 , pub residual_frequency : f32 , pub skew : f32 , pub root_delay : f64 , pub root_dispersion : f64 , pub update_interval : f32 , pub leap_status : std :: string :: String } impl WrappedTypesupport for ChronyTrackingStatus { type CStruct = marti_status_msgs__msg__ChronyTrackingStatus ; fn get_ts () -> & 'static rosidl_message_type_support_t { unsafe { & * rosidl_typesupport_c__get_message_type_support_handle__marti_status_msgs__msg__ChronyTrackingStatus () } } fn create_msg () -> * mut marti_status_msgs__msg__ChronyTrackingStatus { unsafe { marti_status_msgs__msg__ChronyTrackingStatus__create () } } fn destroy_msg (msg : * mut marti_status_msgs__msg__ChronyTrackingStatus) -> () { unsafe { marti_status_msgs__msg__ChronyTrackingStatus__destroy (msg) } ; } fn from_native (# [allow (unused)] msg : & Self :: CStruct) -> ChronyTrackingStatus { ChronyTrackingStatus { header : std_msgs :: msg :: Header :: from_native (& msg . header) , reference : msg . reference . to_str () . to_owned () , stratum : msg . stratum , system_time_offset : msg . system_time_offset , last_offset : msg . last_offset , rms_offset : msg . rms_offset , frequency_offset : msg . frequency_offset , residual_frequency : msg . residual_frequency , skew : msg . skew , root_delay : msg . root_delay , root_dispersion : msg . root_dispersion , update_interval : msg . update_interval , leap_status : msg . leap_status . to_str () . to_owned () , } } fn copy_to_native (& self , # [allow (unused)] msg : & mut Self :: CStruct) { self . header . copy_to_native (& mut msg . header) ; msg . reference . assign (& self . reference) ; msg . stratum = self . stratum ; msg . system_time_offset = self . system_time_offset ; msg . last_offset = self . last_offset ; msg . rms_offset = self . rms_offset ; msg . frequency_offset = self . frequency_offset ; msg . residual_frequency = self . residual_frequency ; msg . skew = self . skew ; msg . root_delay = self . root_delay ; msg . root_dispersion = self . root_dispersion ; msg . update_interval = self . update_interval ; msg . leap_status . assign (& self . leap_status) ; } } impl Default for ChronyTrackingStatus { fn default () -> Self { let msg_native = WrappedNativeMsg :: < ChronyTrackingStatus > :: new () ; ChronyTrackingStatus :: from_native (& msg_native) } } }