pub mod msg { use super :: super :: * ; # [derive (Clone , Debug , PartialEq , Serialize , Deserialize)] # [serde (default)] pub struct MicroROSDiagnosticStatus { pub level : u8 , pub updater_id : u16 , pub hardware_id : u16 , pub key : u16 , pub value_type : u8 , pub bool_value : bool , pub int_value : i32 , pub double_value : f32 , pub value_id : u16 } impl WrappedTypesupport for MicroROSDiagnosticStatus { type CStruct = micro_ros_diagnostic_msgs__msg__MicroROSDiagnosticStatus ; fn get_ts () -> & 'static rosidl_message_type_support_t { unsafe { & * rosidl_typesupport_c__get_message_type_support_handle__micro_ros_diagnostic_msgs__msg__MicroROSDiagnosticStatus () } } fn create_msg () -> * mut micro_ros_diagnostic_msgs__msg__MicroROSDiagnosticStatus { unsafe { micro_ros_diagnostic_msgs__msg__MicroROSDiagnosticStatus__create () } } fn destroy_msg (msg : * mut micro_ros_diagnostic_msgs__msg__MicroROSDiagnosticStatus) -> () { unsafe { micro_ros_diagnostic_msgs__msg__MicroROSDiagnosticStatus__destroy (msg) } ; } fn from_native (# [allow (unused)] msg : & Self :: CStruct) -> MicroROSDiagnosticStatus { MicroROSDiagnosticStatus { level : msg . level , updater_id : msg . updater_id , hardware_id : msg . hardware_id , key : msg . key , value_type : msg . value_type , bool_value : msg . bool_value , int_value : msg . int_value , double_value : msg . double_value , value_id : msg . value_id , } } fn copy_to_native (& self , # [allow (unused)] msg : & mut Self :: CStruct) { msg . level = self . level ; msg . updater_id = self . updater_id ; msg . hardware_id = self . hardware_id ; msg . key = self . key ; msg . value_type = self . value_type ; msg . bool_value = self . bool_value ; msg . int_value = self . int_value ; msg . double_value = self . double_value ; msg . value_id = self . value_id ; } } impl Default for MicroROSDiagnosticStatus { fn default () -> Self { let msg_native = WrappedNativeMsg :: < MicroROSDiagnosticStatus > :: new () ; MicroROSDiagnosticStatus :: from_native (& msg_native) } } # [allow (non_upper_case_globals)] impl MicroROSDiagnosticStatus { pub const ERROR : _bindgen_ty_860 = micro_ros_diagnostic_msgs__msg__MicroROSDiagnosticStatus__ERROR ; pub const OK : _bindgen_ty_858 = micro_ros_diagnostic_msgs__msg__MicroROSDiagnosticStatus__OK ; pub const STALE : _bindgen_ty_861 = micro_ros_diagnostic_msgs__msg__MicroROSDiagnosticStatus__STALE ; pub const VALUE_BOOL : _bindgen_ty_862 = micro_ros_diagnostic_msgs__msg__MicroROSDiagnosticStatus__VALUE_BOOL ; pub const VALUE_DOUBLE : _bindgen_ty_864 = micro_ros_diagnostic_msgs__msg__MicroROSDiagnosticStatus__VALUE_DOUBLE ; pub const VALUE_INT : _bindgen_ty_863 = micro_ros_diagnostic_msgs__msg__MicroROSDiagnosticStatus__VALUE_INT ; pub const VALUE_LOOKUP : _bindgen_ty_865 = micro_ros_diagnostic_msgs__msg__MicroROSDiagnosticStatus__VALUE_LOOKUP ; pub const WARN : _bindgen_ty_859 = micro_ros_diagnostic_msgs__msg__MicroROSDiagnosticStatus__WARN ; } } pub mod srv { # [allow (non_snake_case)] pub mod MicroROSSelfTest { use super :: super :: super :: * ; # [derive (Clone , Debug , PartialEq , Serialize , Deserialize)] pub struct Service () ; impl WrappedServiceTypeSupport for Service { type Request = Request ; type Response = Response ; fn get_ts () -> & 'static rosidl_service_type_support_t { unsafe { & * rosidl_typesupport_c__get_service_type_support_handle__micro_ros_diagnostic_msgs__srv__MicroROSSelfTest () } } } # [derive (Clone , Debug , PartialEq , Serialize , Deserialize)] # [serde (default)] pub struct Request { } impl WrappedTypesupport for Request { type CStruct = micro_ros_diagnostic_msgs__srv__MicroROSSelfTest_Request ; fn get_ts () -> & 'static rosidl_message_type_support_t { unsafe { & * rosidl_typesupport_c__get_message_type_support_handle__micro_ros_diagnostic_msgs__srv__MicroROSSelfTest_Request () } } fn create_msg () -> * mut micro_ros_diagnostic_msgs__srv__MicroROSSelfTest_Request { unsafe { micro_ros_diagnostic_msgs__srv__MicroROSSelfTest_Request__create () } } fn destroy_msg (msg : * mut micro_ros_diagnostic_msgs__srv__MicroROSSelfTest_Request) -> () { unsafe { micro_ros_diagnostic_msgs__srv__MicroROSSelfTest_Request__destroy (msg) } ; } fn from_native (# [allow (unused)] msg : & Self :: CStruct) -> Request { Request { } } fn copy_to_native (& self , # [allow (unused)] msg : & mut Self :: CStruct) { } } impl Default for Request { fn default () -> Self { let msg_native = WrappedNativeMsg :: < Request > :: new () ; Request :: from_native (& msg_native) } } # [derive (Clone , Debug , PartialEq , Serialize , Deserialize)] # [serde (default)] pub struct Response { pub id : std :: string :: String , pub passed : u8 , pub status : micro_ros_diagnostic_msgs :: msg :: MicroROSDiagnosticStatus } impl WrappedTypesupport for Response { type CStruct = micro_ros_diagnostic_msgs__srv__MicroROSSelfTest_Response ; fn get_ts () -> & 'static rosidl_message_type_support_t { unsafe { & * rosidl_typesupport_c__get_message_type_support_handle__micro_ros_diagnostic_msgs__srv__MicroROSSelfTest_Response () } } fn create_msg () -> * mut micro_ros_diagnostic_msgs__srv__MicroROSSelfTest_Response { unsafe { micro_ros_diagnostic_msgs__srv__MicroROSSelfTest_Response__create () } } fn destroy_msg (msg : * mut micro_ros_diagnostic_msgs__srv__MicroROSSelfTest_Response) -> () { unsafe { micro_ros_diagnostic_msgs__srv__MicroROSSelfTest_Response__destroy (msg) } ; } fn from_native (# [allow (unused)] msg : & Self :: CStruct) -> Response { Response { id : msg . id . to_str () . to_owned () , passed : msg . passed , status : micro_ros_diagnostic_msgs :: msg :: MicroROSDiagnosticStatus :: from_native (& msg . status) , } } fn copy_to_native (& self , # [allow (unused)] msg : & mut Self :: CStruct) { msg . id . assign (& self . id) ; msg . passed = self . passed ; self . status . copy_to_native (& mut msg . status) ; } } impl Default for Response { fn default () -> Self { let msg_native = WrappedNativeMsg :: < Response > :: new () ; Response :: from_native (& msg_native) } } } }