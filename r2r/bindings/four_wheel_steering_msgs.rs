pub mod msg { use super :: super :: * ; # [derive (Clone , Debug , PartialEq , Serialize , Deserialize)] # [serde (default)] pub struct FourWheelSteering { pub front_steering_angle : f32 , pub rear_steering_angle : f32 , pub front_steering_angle_velocity : f32 , pub rear_steering_angle_velocity : f32 , pub speed : f32 , pub acceleration : f32 , pub jerk : f32 } impl WrappedTypesupport for FourWheelSteering { type CStruct = four_wheel_steering_msgs__msg__FourWheelSteering ; fn get_ts () -> & 'static rosidl_message_type_support_t { unsafe { & * rosidl_typesupport_c__get_message_type_support_handle__four_wheel_steering_msgs__msg__FourWheelSteering () } } fn create_msg () -> * mut four_wheel_steering_msgs__msg__FourWheelSteering { unsafe { four_wheel_steering_msgs__msg__FourWheelSteering__create () } } fn destroy_msg (msg : * mut four_wheel_steering_msgs__msg__FourWheelSteering) -> () { unsafe { four_wheel_steering_msgs__msg__FourWheelSteering__destroy (msg) } ; } fn from_native (# [allow (unused)] msg : & Self :: CStruct) -> FourWheelSteering { FourWheelSteering { front_steering_angle : msg . front_steering_angle , rear_steering_angle : msg . rear_steering_angle , front_steering_angle_velocity : msg . front_steering_angle_velocity , rear_steering_angle_velocity : msg . rear_steering_angle_velocity , speed : msg . speed , acceleration : msg . acceleration , jerk : msg . jerk , } } fn copy_to_native (& self , # [allow (unused)] msg : & mut Self :: CStruct) { msg . front_steering_angle = self . front_steering_angle ; msg . rear_steering_angle = self . rear_steering_angle ; msg . front_steering_angle_velocity = self . front_steering_angle_velocity ; msg . rear_steering_angle_velocity = self . rear_steering_angle_velocity ; msg . speed = self . speed ; msg . acceleration = self . acceleration ; msg . jerk = self . jerk ; } } impl Default for FourWheelSteering { fn default () -> Self { let msg_native = WrappedNativeMsg :: < FourWheelSteering > :: new () ; FourWheelSteering :: from_native (& msg_native) } } # [derive (Clone , Debug , PartialEq , Serialize , Deserialize)] # [serde (default)] pub struct FourWheelSteeringStamped { pub header : std_msgs :: msg :: Header , pub data : four_wheel_steering_msgs :: msg :: FourWheelSteering } impl WrappedTypesupport for FourWheelSteeringStamped { type CStruct = four_wheel_steering_msgs__msg__FourWheelSteeringStamped ; fn get_ts () -> & 'static rosidl_message_type_support_t { unsafe { & * rosidl_typesupport_c__get_message_type_support_handle__four_wheel_steering_msgs__msg__FourWheelSteeringStamped () } } fn create_msg () -> * mut four_wheel_steering_msgs__msg__FourWheelSteeringStamped { unsafe { four_wheel_steering_msgs__msg__FourWheelSteeringStamped__create () } } fn destroy_msg (msg : * mut four_wheel_steering_msgs__msg__FourWheelSteeringStamped) -> () { unsafe { four_wheel_steering_msgs__msg__FourWheelSteeringStamped__destroy (msg) } ; } fn from_native (# [allow (unused)] msg : & Self :: CStruct) -> FourWheelSteeringStamped { FourWheelSteeringStamped { header : std_msgs :: msg :: Header :: from_native (& msg . header) , data : four_wheel_steering_msgs :: msg :: FourWheelSteering :: from_native (& msg . data) , } } fn copy_to_native (& self , # [allow (unused)] msg : & mut Self :: CStruct) { self . header . copy_to_native (& mut msg . header) ; self . data . copy_to_native (& mut msg . data) ; } } impl Default for FourWheelSteeringStamped { fn default () -> Self { let msg_native = WrappedNativeMsg :: < FourWheelSteeringStamped > :: new () ; FourWheelSteeringStamped :: from_native (& msg_native) } } }