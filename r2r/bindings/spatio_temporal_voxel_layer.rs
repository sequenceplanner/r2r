pub mod srv { # [allow (non_snake_case)] pub mod SaveGrid { use super :: super :: super :: * ; # [derive (Clone , Debug , PartialEq , Serialize , Deserialize)] pub struct Service () ; impl WrappedServiceTypeSupport for Service { type Request = Request ; type Response = Response ; fn get_ts () -> & 'static rosidl_service_type_support_t { unsafe { & * rosidl_typesupport_c__get_service_type_support_handle__spatio_temporal_voxel_layer__srv__SaveGrid () } } } # [derive (Clone , Debug , PartialEq , Serialize , Deserialize)] # [serde (default)] pub struct Request { pub file_name : std :: string :: String } impl WrappedTypesupport for Request { type CStruct = spatio_temporal_voxel_layer__srv__SaveGrid_Request ; fn get_ts () -> & 'static rosidl_message_type_support_t { unsafe { & * rosidl_typesupport_c__get_message_type_support_handle__spatio_temporal_voxel_layer__srv__SaveGrid_Request () } } fn create_msg () -> * mut spatio_temporal_voxel_layer__srv__SaveGrid_Request { unsafe { spatio_temporal_voxel_layer__srv__SaveGrid_Request__create () } } fn destroy_msg (msg : * mut spatio_temporal_voxel_layer__srv__SaveGrid_Request) -> () { unsafe { spatio_temporal_voxel_layer__srv__SaveGrid_Request__destroy (msg) } ; } fn from_native (# [allow (unused)] msg : & Self :: CStruct) -> Request { Request { file_name : msg . file_name . to_str () . to_owned () , } } fn copy_to_native (& self , # [allow (unused)] msg : & mut Self :: CStruct) { msg . file_name . assign (& self . file_name) ; } } impl Default for Request { fn default () -> Self { let msg_native = WrappedNativeMsg :: < Request > :: new () ; Request :: from_native (& msg_native) } } # [derive (Clone , Debug , PartialEq , Serialize , Deserialize)] # [serde (default)] pub struct Response { pub map_size_bytes : f64 , pub status : bool } impl WrappedTypesupport for Response { type CStruct = spatio_temporal_voxel_layer__srv__SaveGrid_Response ; fn get_ts () -> & 'static rosidl_message_type_support_t { unsafe { & * rosidl_typesupport_c__get_message_type_support_handle__spatio_temporal_voxel_layer__srv__SaveGrid_Response () } } fn create_msg () -> * mut spatio_temporal_voxel_layer__srv__SaveGrid_Response { unsafe { spatio_temporal_voxel_layer__srv__SaveGrid_Response__create () } } fn destroy_msg (msg : * mut spatio_temporal_voxel_layer__srv__SaveGrid_Response) -> () { unsafe { spatio_temporal_voxel_layer__srv__SaveGrid_Response__destroy (msg) } ; } fn from_native (# [allow (unused)] msg : & Self :: CStruct) -> Response { Response { map_size_bytes : msg . map_size_bytes , status : msg . status , } } fn copy_to_native (& self , # [allow (unused)] msg : & mut Self :: CStruct) { msg . map_size_bytes = self . map_size_bytes ; msg . status = self . status ; } } impl Default for Response { fn default () -> Self { let msg_native = WrappedNativeMsg :: < Response > :: new () ; Response :: from_native (& msg_native) } } } }