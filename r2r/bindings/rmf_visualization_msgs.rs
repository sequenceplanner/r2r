pub mod msg { use super :: super :: * ; # [derive (Clone , Debug , PartialEq , Serialize , Deserialize)] # [serde (default)] pub struct RvizParam { pub map_name : std :: string :: String , pub query_duration : i64 , pub start_duration : i64 } impl WrappedTypesupport for RvizParam { type CStruct = rmf_visualization_msgs__msg__RvizParam ; fn get_ts () -> & 'static rosidl_message_type_support_t { unsafe { & * rosidl_typesupport_c__get_message_type_support_handle__rmf_visualization_msgs__msg__RvizParam () } } fn create_msg () -> * mut rmf_visualization_msgs__msg__RvizParam { unsafe { rmf_visualization_msgs__msg__RvizParam__create () } } fn destroy_msg (msg : * mut rmf_visualization_msgs__msg__RvizParam) -> () { unsafe { rmf_visualization_msgs__msg__RvizParam__destroy (msg) } ; } fn from_native (# [allow (unused)] msg : & Self :: CStruct) -> RvizParam { RvizParam { map_name : msg . map_name . to_str () . to_owned () , query_duration : msg . query_duration , start_duration : msg . start_duration , } } fn copy_to_native (& self , # [allow (unused)] msg : & mut Self :: CStruct) { msg . map_name . assign (& self . map_name) ; msg . query_duration = self . query_duration ; msg . start_duration = self . start_duration ; } } impl Default for RvizParam { fn default () -> Self { let msg_native = WrappedNativeMsg :: < RvizParam > :: new () ; RvizParam :: from_native (& msg_native) } } }