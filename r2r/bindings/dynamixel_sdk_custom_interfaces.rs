pub mod srv { # [allow (non_snake_case)] pub mod GetPosition { use super :: super :: super :: * ; # [derive (Clone , Debug , PartialEq , Serialize , Deserialize)] pub struct Service () ; impl WrappedServiceTypeSupport for Service { type Request = Request ; type Response = Response ; fn get_ts () -> & 'static rosidl_service_type_support_t { unsafe { & * rosidl_typesupport_c__get_service_type_support_handle__dynamixel_sdk_custom_interfaces__srv__GetPosition () } } } # [derive (Clone , Debug , PartialEq , Serialize , Deserialize)] # [serde (default)] pub struct Request { pub id : u8 } impl WrappedTypesupport for Request { type CStruct = dynamixel_sdk_custom_interfaces__srv__GetPosition_Request ; fn get_ts () -> & 'static rosidl_message_type_support_t { unsafe { & * rosidl_typesupport_c__get_message_type_support_handle__dynamixel_sdk_custom_interfaces__srv__GetPosition_Request () } } fn create_msg () -> * mut dynamixel_sdk_custom_interfaces__srv__GetPosition_Request { unsafe { dynamixel_sdk_custom_interfaces__srv__GetPosition_Request__create () } } fn destroy_msg (msg : * mut dynamixel_sdk_custom_interfaces__srv__GetPosition_Request) -> () { unsafe { dynamixel_sdk_custom_interfaces__srv__GetPosition_Request__destroy (msg) } ; } fn from_native (# [allow (unused)] msg : & Self :: CStruct) -> Request { Request { id : msg . id , } } fn copy_to_native (& self , # [allow (unused)] msg : & mut Self :: CStruct) { msg . id = self . id ; } } impl Default for Request { fn default () -> Self { let msg_native = WrappedNativeMsg :: < Request > :: new () ; Request :: from_native (& msg_native) } } # [derive (Clone , Debug , PartialEq , Serialize , Deserialize)] # [serde (default)] pub struct Response { pub position : i32 } impl WrappedTypesupport for Response { type CStruct = dynamixel_sdk_custom_interfaces__srv__GetPosition_Response ; fn get_ts () -> & 'static rosidl_message_type_support_t { unsafe { & * rosidl_typesupport_c__get_message_type_support_handle__dynamixel_sdk_custom_interfaces__srv__GetPosition_Response () } } fn create_msg () -> * mut dynamixel_sdk_custom_interfaces__srv__GetPosition_Response { unsafe { dynamixel_sdk_custom_interfaces__srv__GetPosition_Response__create () } } fn destroy_msg (msg : * mut dynamixel_sdk_custom_interfaces__srv__GetPosition_Response) -> () { unsafe { dynamixel_sdk_custom_interfaces__srv__GetPosition_Response__destroy (msg) } ; } fn from_native (# [allow (unused)] msg : & Self :: CStruct) -> Response { Response { position : msg . position , } } fn copy_to_native (& self , # [allow (unused)] msg : & mut Self :: CStruct) { msg . position = self . position ; } } impl Default for Response { fn default () -> Self { let msg_native = WrappedNativeMsg :: < Response > :: new () ; Response :: from_native (& msg_native) } } } } pub mod msg { use super :: super :: * ; # [derive (Clone , Debug , PartialEq , Serialize , Deserialize)] # [serde (default)] pub struct SetPosition { pub id : u8 , pub position : i32 } impl WrappedTypesupport for SetPosition { type CStruct = dynamixel_sdk_custom_interfaces__msg__SetPosition ; fn get_ts () -> & 'static rosidl_message_type_support_t { unsafe { & * rosidl_typesupport_c__get_message_type_support_handle__dynamixel_sdk_custom_interfaces__msg__SetPosition () } } fn create_msg () -> * mut dynamixel_sdk_custom_interfaces__msg__SetPosition { unsafe { dynamixel_sdk_custom_interfaces__msg__SetPosition__create () } } fn destroy_msg (msg : * mut dynamixel_sdk_custom_interfaces__msg__SetPosition) -> () { unsafe { dynamixel_sdk_custom_interfaces__msg__SetPosition__destroy (msg) } ; } fn from_native (# [allow (unused)] msg : & Self :: CStruct) -> SetPosition { SetPosition { id : msg . id , position : msg . position , } } fn copy_to_native (& self , # [allow (unused)] msg : & mut Self :: CStruct) { msg . id = self . id ; msg . position = self . position ; } } impl Default for SetPosition { fn default () -> Self { let msg_native = WrappedNativeMsg :: < SetPosition > :: new () ; SetPosition :: from_native (& msg_native) } } }